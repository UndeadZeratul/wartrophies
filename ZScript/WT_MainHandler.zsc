class WT_MainHandler : StaticEventHandler
{
	enum WT_IwadFilter
	{
		Filter_None,
		Filter_Doom,
		Filter_Heretic,
		Filter_Hexen,
		Filter_Strife,
		Filter_All
	}

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	private void PlayKillSound()
	{
		S_StartSound("WT/KillSound"..KillSoundType.GetInt(), CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	private void UpgradePrestige()
	{
		Prestige++;
		int ExtraExperience = Experience - XPReq[XPReq.Size() - 1];
		Experience = ExtraExperience;
		S_StartSound("WT/Prestige", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	// --------------------------------------------------
	// DAMAGER TO WEAPON ASSIGNMENT
	// --------------------------------------------------

	override void WorldThingSpawned(WorldEvent e)
	{
		if (!e.Thing) // [Ace] How???
		{
			return;
		}
		
		PlayerPawn plr = TraverseTargetChain(e.Thing);
		if (plr && !e.Thing.Target.bISMONSTER && (e.Thing.bMISSILE || e.Thing.bPUFFONACTORS || e.Thing.bALWAYSPUFF))
		{
			int playerNum = plr.PlayerNumber();
			if (playerNum > -1)
			{
				WT_InflictorInfo Bind = new('WT_InflictorInfo');
				Bind.Inflictor = e.Thing;
				Bind.OwningPlayer = plr;
				if (SelectedWeaponWorld)
				{
					Bind.WeaponUsed = SelectedWeaponWorld.GetClassName();
				}

				// [Ace] Hardcoded overrides. I hate this.
				Name cls = 'BFGPuff';
				if (e.Thing is cls)
				{
					Bind.WeaponUsed = 'BFG9K';
				}

				if (Bind.WeaponUsed != '')
				{
					CleanupBinds();
					InflictorBinds.Push(Bind);
				}
			}
		}
	}

	// [Ace] Go through the entire pointer chain until you either run out of iterations or finally find the player.
	private PlayerPawn TraverseTargetChain(Actor a)
	{
		PlayerPawn ActT = null;
		Actor NextT = a.Target;

		for (int i = 0; i < 6; ++i) // [Ace] Used to prevent infinite recursion.
		{
			if (NextT is 'PlayerPawn')
			{
				ActT = PlayerPawn(NextT);
				break;
			}
			else if (NextT)
			{
				NextT = NextT.Target;
			}
		}

		return ActT;
	}

	// --------------------------------------------------
	// PROGRESS ERASING
	// --------------------------------------------------

	private void ResetTally()
	{
		ResetProgress();
		Console.Printf("All statistics successfully reset!");
	}

	private void ResetSelectedWeapon()
	{
		int index = AllWeapons.Find(SelectedWeaponList);
		if (index == AllWeapons.Size())
		{
			return;
		}

		WT_WeaponData data = AllWeapons[index];
		AllWeapons.Delete(index);
		Console.Printf("Statistics for %s successfully reset!", GetDefaultByType(data.Object).GetTag());
	}

	// --------------------------------------------------
	// MISCELLANEOUS
	// --------------------------------------------------

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Player != consoleplayer) return;

		string cmd = e.Name.MakeLower();

		if (e.Name ~== "WT_ForceSave")
		{
			SaveData(true, true);
			return;
		}

		if (e.Name ~== "WT_InitWeaponFolders")
		{
			InitWeaponFolders();
			InitLiteHud();
			return;
		}

		if (e.Name ~== "WT_ReInitialize")
		{
			InitLiteHud();
			InitScorecard(SelectedPage);
			return;
		}

		if (e.Name ~== "WT_ResetTally")
		{
			ResetTally();
			return;
		}

		if (e.Name ~== "WT_ResetSelectedWeapon")
		{
			ResetSelectedWeapon();
			return;
		}

		if (e.Name ~== "WT_PreviousPage")
		{
			SwitchScorecardPage(SelectedPage - 1);
			return;
		}

		if (e.Name ~== "WT_NextPage")
		{
			SwitchScorecardPage(SelectedPage + 1);
			return;
		}

		if (e.Name ~== "WT_PreviousWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex - 1);
			return;
		}

		if (e.Name ~== "WT_NextWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex + 1);
			return;
		}

		if (e.Name ~== "WT_ToggleUI")
		{
			DrawUi = !DrawUi;
			self.IsUiProcessor = !self.IsUiProcessor;
			S_StartSound(DrawUi ? "WT/ScorecardOpen" : "WT/ScorecardClose", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);

			if (DrawUi)
			{
				SwitchScorecardPage(Page_Main);
			}
			else
			{
				SelectLiteWeapon();
			}
			return;
		}

		if (e.Name ~== "WT_ClearFilter")
		{
			SearchFilter = "";
			return;
		}

		if (e.Name ~== "WT_EraseLastFilterChar")
		{
			SearchFilter.DeleteLastCharacter();
			return;
		}

		if (e.Name ~== "WT_AppendFilterChar")
		{
			SearchFilter = SearchFilter..String.Format("%c", e.Args[0]);
			return;
		}

		if (e.Name ~== "WT_UpgradePrestige" && !e.IsManual)
		{
			UpgradePrestige();
			return;
		}

		if (e.Name ~== "WT_ToggleSaving")
		{
			SetSavingStatus(DisableSaving);
			return;
		}

		if (e.Name ~== "WT_Cleanup")
		{
			CleanupWeaponKills(e.Args[0]);
			return;
		}
	}
}