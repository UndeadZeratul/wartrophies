class WT_MainHandler : StaticEventHandler
{
	enum WT_IwadFilter
	{
		Filter_None,
		Filter_Doom,
		Filter_Heretic,
		Filter_Hexen,
		Filter_Strife,
		Filter_All
	}

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	void RegisterKill(class<Weapon> wpn, class<Actor> victim)
	{
		WT_WeaponData Weapon = FindWeapon(wpn);

		// [Ace] If weapon exists, update info.
		if (Weapon)
		{
			WT_MonsterData Monster = Weapon.FindMonster(victim);
			if (Monster)
			{
				Monster.Kills++;
			}
			else
			{
				Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

				Weapon.Monsters.Push(Monster);
			}
			SelWeaponKills++;
			TotalKillsEver++;
		}
		// [Ace] Otherwise create a new weapon.
		else
		{
			Weapon = new ("WT_WeaponData");

			string WeaponName = wpn.GetClassName();
			WeaponName = WeaponName.MakeLower();

			Weapon.DictionaryName = WeaponName;
			Weapon.Object = wpn;
			Weapon.FolderName = FolderBindings.At(WeaponName);

				WT_MonsterData Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

			Weapon.Monsters.Push(Monster);

			AllWeapons.Push(Weapon);
			InitLiteHud();
		}

		double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
		int SkillNumber = min(4, (G_SkillPropertyInt(SKILLP_ACSReturn) + 1));
		int ExperienceGained = int(min(12000, GetDefaultByType(victim).Health) * 0.05 * SkillNumber * FastMonstersMult);

		// [Ace] Manually incremented, but those don't actually affect the data because they're only used in the UI.
		
		Experience += ExperienceGained;
	}

	private void PlayKillSound()
	{
		S_StartSound("WT/KillSound"..KillSoundType.GetInt(), CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	private void UpgradePrestige()
	{
		Prestige++;
		int ExtraExperience = Experience - XPReq[XPReq.Size() - 1];
		Experience = ExtraExperience;
		S_StartSound("WT/Prestige", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	// --------------------------------------------------
	// DEATH STUFF
	// --------------------------------------------------

	// [Ace] WTD gets called *after* the damage is dealt. Just sayin'.
	// 10 bucks it's going to break with Hideous Destructor.
	// 20 bucks I won't be able to fix it.
	// 30 bucks I'm not paying up if I lose.
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER && e.DamageSource && e.DamageSource.player && players[consoleplayer] == e.DamageSource.player && e.Thing.Health <= 0 && !IsBlacklisted(e.Thing.GetClass()))
		{
			// [Ace] Killer is a projectile that's also not a puff.
			if (e.Inflictor && e.Inflictor.bMISSILE && !e.Inflictor.bALWAYSPUFF && !e.Inflictor.bPUFFONACTORS)
			{
				string WeaponUsed = ProjectileBinds.At(e.Inflictor.GetClassName());
				if (WeaponUsed != "")
				{
					if (!IsBlacklisted(WeaponUsed))
					{
						RegisterKill(WeaponUsed, e.Thing.GetClass());
						PlayKillSound();
					}
				}
			}

			// [Ace] Killer is the player's hitscan or telefrag. Don't blacklist the telefrag.
			else
			{
				if (e.DamageSource is "PlayerPawn")
				{
					switch (e.DamageType)
					{
						case 'Telefrag': RegisterKill("WT_Telefrag", e.Thing.GetClass()); break;
						case 'GloryKill': RegisterKill("WT_D4TGloryKills", e.Thing.GetClass()); break;
						default:
							if (SelectedWeaponWorld && !IsBlacklisted(SelectedWeaponWorld))
							{
								RegisterKill(SelectedWeaponWorld, e.Thing.GetClass());
							}
							else return;
							break;
					}
					PlayKillSound();
				}
			}
		}
	}

	// --------------------------------------------------
	// PROJECTILE TO WEAPON ASSIGNMENT
	// --------------------------------------------------

	override void WorldThingSpawned(WorldEvent e)
	{
		// [Ace] Some mods' puffs have "+MISSILE". Don't consider them a projectile if they also have one of the puff flags.
		if (e.Thing && e.Thing.bMISSILE && !e.Thing.bALWAYSPUFF && !e.Thing.bPUFFONACTORS && e.Thing.target && e.Thing.target is "PlayerPawn")
		{
			let plr = PlayerPawn(e.Thing.target);
			if (plr && SelectedWeaponWorld)
			{
				ProjectileBinds.Insert(e.Thing.GetClassName(), SelectedWeaponWorld.GetClassName());
			}
		}
	}

	// --------------------------------------------------
	// PROGRESS ERASING
	// --------------------------------------------------

	private void ResetTally()
	{
		ResetProgress();
		Console.Printf("All statistics successfully reset!");
	}

	private void ResetWeapon()
	{
		let wpn = FindWeapon(SelectedWeaponWorld);
		if (wpn)
		{
			wpn.Reset();
			InitLiteHud();
		}
		Console.Printf("Weapon statistics successfully reset!");
	}

	// --------------------------------------------------
	// MISCELLANEOUS
	// --------------------------------------------------

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Player != consoleplayer) return;

		if (e.Name ~== "WT_ForceSave")
		{
			SaveData(true, true);
		}

		if (e.Name ~== "WT_InitWeaponFolders")
		{
			InitWeaponFolders();
			InitLiteHud();
		}

		if (e.Name ~== "WT_ReInitialize")
		{
			InitLiteHud();
			InitScorecard(SelectedPage);
		}

		if (e.Name ~== "WT_ResetTally")
		{
			ResetTally();
		}

		if (e.Name ~== "WT_ResetWeapon")
		{
			ResetWeapon();
		}

		if (e.Name ~== "WT_PreviousPage")
		{
			SwitchScorecardPage(SelectedPage - 1);
		}

		if (e.Name ~== "WT_NextPage")
		{
			SwitchScorecardPage(SelectedPage + 1);
		}

		if (e.Name ~== "WT_PreviousWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex - 1);
		}

		if (e.Name ~== "WT_NextWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex + 1);
		}

		if (e.Name ~== "WT_ToggleUI")
		{
			DrawUi = !DrawUi;
			self.IsUiProcessor = !self.IsUiProcessor;
			S_StartSound(DrawUi ? "WT/ScorecardOpen" : "WT/ScorecardClose", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);

			if (DrawUi)
			{
				SwitchScorecardPage(Page_Main);
			}
			else
			{
				SelectLiteWeapon();
			}
		}

		if (e.Name ~== "WT_ClearFilter")
		{
			SearchFilter = "";
		}

		if (e.Name ~== "WT_EraseLastFilterChar")
		{
			SearchFilter.DeleteLastCharacter();
		}

		if (e.Name ~== "WT_AppendFilterChar")
		{
			SearchFilter = SearchFilter..String.Format("%c", e.Args[0]);
		}

		if (e.Name ~== "WT_UpgradePrestige" && !e.IsManual)
		{
			UpgradePrestige();
		}

		if (e.Name ~== "WT_ToggleSaving")
		{
			SetSavingStatus(DisableSaving);
		}
	}
}