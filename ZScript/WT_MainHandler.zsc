class WT_MainHandler : EventHandler
{
	enum IWADFilter
	{
		Filter_None,
		Filter_Doom,
		Filter_Heretic,
		Filter_Hexen,
		Filter_Strife,
		Filter_All
	}

	// --------------------------------------------------
	// CVARS & GLOBAL VARS
	// --------------------------------------------------

	static const int XPReq[] = { 2500, 5000, 8000, 12500, 16000, 22000, 30000, 40000, 55000, 67500, 82000, 100000, 125000, 175000, 250000, 400000, 600000, 900000, 1150000, 1400000, 1900000, 2350000, 2850000, 3450000, 4000000, 5000000, 6500000, 8000000 };
	static const string XPRanks[] = { "Private", "Private 1st Class", "Specialist", "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "First Sergeant", "Sergeant Major", "Cmd. Sergeant Major", "Master Chief Sergeant", "2nd Lieutenant", "1st Lieutenant", "Captain", "Major", "Lieutenant Colonel", "Colonel", "Brigadier General", "Major General", "Lieutenant General", "General", "General of the Army", "Field Marshal", "Force Of Freedom", "Savior of Humanity", "Immortal Demonslayer", "Heavenly Demiurge" };
	const RankImagesPrefix = "RANK";

	static const int WeapKillReq[] = { 10, 25, 50, 100, 150, 250, 375, 500, 750, 999, 1000, 1500, 2500, 5000, 7500, 7616, 8500, 10000, 14444, 19670 };
	static const string WeapRanks[] = { "Uninteresting", "Common", "Vaguely Rough", "Slightly Dangerous", "Plenty Hurtful", "Heavily Damaging", "Blood Splattered", "Wicked", "Positively Demonic", "Absolutely Ordinary", "Face-Gibbing", "Death-Inducing", "Absolutely Barbaric", "Ultraviolent", "Nightmarish", "American", "id Select", "Carmack's Own", "Ludicrously Deadly", "Romero's Prized" };

	static const int GenocideReqs[] = { 100, 500, 1500, 2750, 5500, 9000, 14000, 22000, 30000, 45000, 66666, 99999, 125000, 150000, 175000, 200000, 225000, 250000, 275000, 300000, 325000, 350000, 375000, 400000, 450000, 500000  };
	static const string GenocideRanks[]= { "Innocent", "Pacifist", "Gun-shy", "Unbloodied", "Still Afraid", "Base Grunt", "Bounty Hunter", "Grave Digger", "Ditch Filler", "Killer", "Murderous Spree", "Mass Assassin", "Master Gunman", "Basically Mor'Ladim", "Anti-Army", "Diablophobe", "Bloodthirsty", "Ludicrous", "Warlord", "The Cleaner", "Psychopath", "Unstoppable Force", "Carnage Elemental", "Death Incarnate", "Doomslayer", "God of Genocide" };

	private transient CVar WeaponStorage;
	private transient CVar ExperienceStorage;
	private transient CVar BlackDisplay;
	private transient CVar IWADWeaponFilter;
	private transient CVar IWADMonsterFilter;
	private transient CVar KillSoundType;
	private transient CVar EventSounds;
	private transient CVar LiteHUDType;

	private transient Array<class<Weapon> > AvailableWeapons;
	private transient int Experience;

	private transient int PlayerRank;
	private transient string PlayerRankString;

	private transient Dictionary MonsterKills; // [Ace] The value of each key is the monster dictionary's JSON. The key is the weapon.
	private transient Dictionary ProjectileBinds; // [Ace] Key - projectile, value - weapon.

	private transient class<Weapon> ReadyWeapon;

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	void UpdateTallyFor(string weapon, string victim)
	{
		// [Ace] If weapon exists, update info.
		string CurrWeaponKills = MonsterKills.At(weapon);
		if (CurrWeaponKills != "")
		{
			Dictionary KillStats = Dictionary.FromString(CurrWeaponKills);

			string Kills = KillStats.At(victim);
			KillStats.Insert(victim, Kills != "" ? String.Format("%i", int(Kills.ToDouble()) + 1) : "1");

			MonsterKills.Insert(weapon, KillStats.ToString());
		}

		// [Ace] Otherwise, create it and update info.
		else
		{
			Dictionary KillStats = Dictionary.Create();
			KillStats.Insert(victim, "1");

			MonsterKills.Insert(weapon, KillStats.ToString());
		}
	}

	void AddExperience(int exp)
	{
		Experience += exp;
		if (EventSounds.GetBool() && PlayerRank < XPReq.Size() && Experience >= XPReq[PlayerRank])
		{
			S_StartSound("WT/LevelUp", CHANF_UI, CHAN_AUTO | CHAN_UI);
		}
	}

	private void PlayKillSound()
	{
		S_StartSound("WT/KillSound"..KillSoundType.GetInt(), CHANF_UI, CHAN_AUTO | CHAN_UI);
	}

	private void SortWeaponList()
	{
		for (int i = 0; i < AvailableWeapons.Size() - 1; ++i)
		{
			for (int j = i + 1; j < AvailableWeapons.Size(); ++j)
			{
				let CurrWeapon = GetDefaultByType(AvailableWeapons[i]);
				let NextWeapon = GetDefaultByType(AvailableWeapons[j]);

				// [Ace] Sort by numbers first, then by first letter if the numbers match.
				if (CurrWeapon.SlotNumber >= NextWeapon.SlotNumber || (CurrWeapon.SlotNumber == NextWeapon.SlotNumber && String.Format("%s", CurrWeapon.GetClassName()).ByteAt(0) >= String.Format("%s", NextWeapon.GetClassName()).ByteAt(0)))
				{
					let Swap = AvailableWeapons[i];
					AvailableWeapons[i] = AvailableWeapons[j];
					AvailableWeapons[j] = Swap;
				}
			}
		}
	}

	private void GetAvailableWeapons()
	{
		AvailableWeapons.Clear();
		int WFilter = IWADWeaponFilter.GetInt();
		
		let it = DictionaryIterator.Create(MonsterKills);
		while (it.Next())
		{
			class<Weapon> wpn;
			wpn = it.Key();
			if (wpn)
			{
				int IwadType = GetIwadType(Search_Weapons, wpn);
				if (WFilter == Filter_All || WFilter == IWadType || IwadType == Filter_None)
				{
					AvailableWeapons.Push(wpn);
				}
			}
		}

		SortWeaponList();
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private int, string GetPlayerRank()
	{
		int PlayerRank = 0;
		string PlayerRankString = "Recruit";
		for (int i = 0; i < XPReq.Size(); ++i)
		{
			if (Experience >= XPReq[i])
			{
				PlayerRank = i + 1;
				PlayerRankString = XPRanks[i];
			}
		}

		return PlayerRank, PlayerRankString;
	}

	// --------------------------------------------------
	// DEATH STUFF
	// --------------------------------------------------

	// [Ace] WTD gets called *after* the damage is dealt. Just sayin'.
	// 10 bucks it's going to break with Hideous Destructor.
	// 20 bucks I won't be able to fix it.
	// 30 bucks I'm not paying up if I lose.
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER && e.DamageSource && e.DamageSource is "PlayerPawn" && e.Thing.Health <= 0)
		{
			double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
			int SkillNumber = (G_SkillPropertyInt(SKILLP_ACSReturn) + 1);
			int ExperienceGained = int(min(10000, e.Thing.GetSpawnHealth()) * 0.05 * SkillNumber * FastMonstersMult);

			// [Ace] Killer is a projectile.
			if (e.Inflictor && e.Inflictor.bMISSILE)
			{
				string WeaponUsed = ProjectileBinds.At(e.Inflictor.GetClassName());
				if (WeaponUsed != "")
				{
					UpdateTallyFor(WeaponUsed, e.Thing.GetClassName());
					AddExperience(ExperienceGained);

					PlayKillSound();
				}
			}

			// [Ace] Killer is the player's hitscan.
			else
			{
				let plr = PlayerPawn(e.DamageSource);
				if (plr && plr.player && plr.player.ReadyWeapon)
				{
					string WeaponUsed = plr.player.ReadyWeapon.GetClassName();
					UpdateTallyFor(WeaponUsed, e.Thing.GetClassName());
					AddExperience(ExperienceGained);

					PlayKillSound();
				}
			}
		}
	}

	// --------------------------------------------------
	// PROJECTILE TO WEAPON ASSIGNMENT
	// --------------------------------------------------

	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.Thing && e.Thing.bMISSILE && e.Thing.target && e.Thing.target is "PlayerPawn")
		{
			let plr = PlayerPawn(e.Thing.target);
			if (plr && plr.player && plr.player.ReadyWeapon)
			{
				ProjectileBinds.Insert(e.Thing.GetClassName(), plr.player.ReadyWeapon.GetClassName());
			}
		}
	}

	// --------------------------------------------------
	// INITIALIZATION
	// --------------------------------------------------

	// [Ace] OnRegister is called when save games are loaded.
	override void OnRegister()
	{
		WeaponStorage = CVar.FindCVar('wt_stats_weapons_kills');
		ExperienceStorage = CVar.FindCVar('wt_stats_experience');
		BlackDisplay = CVar.FindCVar('wt_panel_blackdisplay');
		IWADWeaponFilter = CVar.FindCVar('wt_filter_iwad_weapons');
		IWADMonsterFilter = CVar.FindCVar('wt_filter_iwad_monsters');
		KillSoundType = CVar.FindCVar('wt_killsound');
		EventSounds = CVar.FindCVar('wt_eventsounds');
		LiteHUDType = CVar.FindCVar('wt_showlite');

		Initialize(false);
	}

	void Initialize(bool reset)
	{
		ProjectileBinds = Dictionary.Create();

		// [Ace] This exists because calling ResetTally clears the CVars, but not before Dictionary.FromString can recreate the dictionary using the old CVars.
		// This forces creation of new dictionaries instead of relying on empty strings.
		if (reset)
		{
			WeaponStorage.ResetToDefault();
			ExperienceStorage.ResetToDefault();
			MonsterKills = Dictionary.Create();
			Experience = 0;
		}
		else
		{
			// [Ace] Glorious m8f hax. At least they actually work.
			// Update the variables with what's in the CVars.
			String s = WeaponStorage.GetString();
			s.Replace("@", String.Format("%c", 92));

			MonsterKills = Dictionary.FromString(s);
			Experience = ExperienceStorage.GetInt();

			[PlayerRank, PlayerRankString] = GetPlayerRank();
		}
	}

	// --------------------------------------------------
	// VARIABLE UPDATES & OTHER
	// --------------------------------------------------

	override void WorldTick()
	{
		// [Ace] Increasing the delay might increase performance. Do it only if absolutely necessary!
		// There's no guarantee it will.
		if (MonsterKills && level.time % 2 == 0)
		{
			String s = MonsterKills.ToString();
			s.Replace(String.Format("%c", 92), "@");
			WeaponStorage.SetString(s);
			ExperienceStorage.SetInt(Experience);

			GetAvailableWeapons();
			[PlayerRank, PlayerRankString] = GetPlayerRank();

			// [Ace] This will desync. You have been warned. I have been warned.
			let plr = PlayerPawn(players[consoleplayer].mo);
			if (plr && plr.player && plr.player.ReadyWeapon)
			{
				ReadyWeapon = plr.player.ReadyWeapon.GetClass();
			}
		}
	}

	// --------------------------------------------------
	// PROGRESS ERASING
	// --------------------------------------------------

	private void ResetTally()
	{
		Initialize(true);
		Console.Printf("All statistics successfully reset!");
	}

	private void ResetWeapon()
	{
		if (MonsterKills)
		{
			MonsterKills.Remove(ReadyWeapon.GetClassName());
		}
		Console.Printf("Weapon statistics successfully reset!");
	}

	// --------------------------------------------------
	// MISCELLANEOUS
	// --------------------------------------------------

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "WT_ResetTally")
		{
			ResetTally();
		}

		if (e.Name ~== "WT_ResetWeapon")
		{
			ResetWeapon();
		}

		if (e.Name ~== "WT_ToggleUI")
		{
			DrawUi = !DrawUi;
			self.IsUiProcessor = !self.IsUiProcessor;
		}
	}
}