class WT_MainHandler : EventHandler
{
	enum IWADFilter
	{
		Filter_None,
		Filter_Doom,
		Filter_Heretic,
		Filter_Hexen,
		Filter_Strife,
		Filter_All
	}

	// --------------------------------------------------
	// CVARS & GLOBAL VARS
	// --------------------------------------------------

	private transient CVar WeaponStorage;
	private transient CVar ExperienceStorage;
	private transient CVar PrestigeStorage;
	private transient CVar KillSoundType;

	private transient int Experience;
	private transient int Prestige;

	private transient Dictionary WeaponStats; // [Ace] The value of each key is the monster dictionary's JSON. The key is the weapon.
	private transient Dictionary ProjectileBinds; // [Ace] Key - projectile, value - weapon.

	private transient class<Weapon> ReadyWeapon;

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	void UpdateTallyFor(string weapon, string victim)
	{
		// [Ace] If weapon exists, update info.
		string CurrWeaponKills = WeaponStats.At(weapon);
		if (CurrWeaponKills != "")
		{
			Dictionary KillStats = Dictionary.FromString(CurrWeaponKills);

			string Kills = KillStats.At(victim);
			KillStats.Insert(victim, Kills != "" ? String.Format("%i", int(Kills.ToDouble()) + 1) : "1");

			WeaponStats.Insert(weapon, KillStats.ToString());
		}

		// [Ace] Otherwise, create it and update info.
		else
		{
			Dictionary KillStats = Dictionary.Create();
			KillStats.Insert(victim, "1");

			WeaponStats.Insert(weapon, KillStats.ToString());
		}
	}

	private void PlayKillSound()
	{
		S_StartSound("WT/KillSound"..KillSoundType.GetInt(), CHANF_UI, CHAN_AUTO | CHAN_UI);
	}

	private void UpgradePrestige()
	{
		Prestige++;
		int ExtraExperience = Experience - XPReq[XPReq.Size() - 1];
		Experience = ExtraExperience;
		S_StartSound("WT/Prestige", CHAN_UI | CHAN_AUTO);
	}

	// --------------------------------------------------
	// DEATH STUFF
	// --------------------------------------------------

	// [Ace] WTD gets called *after* the damage is dealt. Just sayin'.
	// 10 bucks it's going to break with Hideous Destructor.
	// 20 bucks I won't be able to fix it.
	// 30 bucks I'm not paying up if I lose.
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER && e.DamageSource && e.DamageSource is "PlayerPawn" && e.Thing.Health <= 0)
		{
			double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
			int SkillNumber = min(4, (G_SkillPropertyInt(SKILLP_ACSReturn) + 1));
			int ExperienceGained = int(min(12000, e.Thing.default.Health) * 0.05 * SkillNumber * FastMonstersMult);

			// [Ace] Killer is a projectile that's also not a puff.
			if (e.Inflictor && e.Inflictor.bMISSILE && !e.Inflictor.bALWAYSPUFF && !e.Inflictor.bPUFFONACTORS)
			{
				string WeaponUsed = ProjectileBinds.At(e.Inflictor.GetClassName());
				if (WeaponUsed != "")
				{
					UpdateTallyFor(WeaponUsed, e.Thing.GetClassName());
					
					Experience += ExperienceGained;
					PlayKillSound();
				}
			}

			// [Ace] Killer is the player's hitscan.
			else
			{
				let plr = PlayerPawn(e.DamageSource);
				if (plr && plr.player && plr.player.ReadyWeapon)
				{
					string WeaponUsed = plr.player.ReadyWeapon.GetClassName();
					UpdateTallyFor(WeaponUsed, e.Thing.GetClassName());

					Experience += ExperienceGained;
					PlayKillSound();
				}
			}
		}
	}

	// --------------------------------------------------
	// PROJECTILE TO WEAPON ASSIGNMENT
	// --------------------------------------------------

	override void WorldThingSpawned(WorldEvent e)
	{
		// [Ace] Some mods' puffs have "ISMISSILE". Don't consider them a projectile if they also have one of the puff flags.
		if (e.Thing && e.Thing.bMISSILE && !e.Thing.bALWAYSPUFF && !e.Thing.bPUFFONACTORS && e.Thing.target && e.Thing.target is "PlayerPawn")
		{
			let plr = PlayerPawn(e.Thing.target);
			if (plr && plr.player && plr.player.ReadyWeapon)
			{
				ProjectileBinds.Insert(e.Thing.GetClassName(), plr.player.ReadyWeapon.GetClassName());
			}
		}
	}

	// --------------------------------------------------
	// INITIALIZATION
	// --------------------------------------------------

	// [Ace] OnRegister is called when save games are loaded.
	override void OnRegister()
	{
		WeaponStorage = CVar.FindCVar("wt_stats_weapons_kills");
		ExperienceStorage = CVar.FindCVar('wt_stats_experience');
		PrestigeStorage = CVar.FindCVar('wt_stats_prestige');

		BlackDisplay = CVar.FindCVar('wt_panel_blackdisplay');
		IWADWeaponFilter = CVar.FindCVar('wt_filter_iwad_weapons');
		IWADMonsterFilter = CVar.FindCVar('wt_filter_iwad_monsters');
		KillSoundType = CVar.FindCVar('wt_killsound');

		LiteHudType = CVar.FindCVar('wt_showlite');
		LiteHudOffsetX = CVar.FindCVar('wt_lite_offset_x');
		LiteHudOffsetY = CVar.FindCVar('wt_lite_offset_y');
		LiteHudAlpha = CVar.FindCVar('wt_lite_alpha');
		LiteFolderView = CVar.FindCVar('wt_lite_usefolders');
		LiteHudColors[Elem_Labels] = CVar.FindCVar('wt_lite_color_labels');
		LiteHudColors[Elem_TotalKills] = CVar.FindCVar('wt_lite_color_totalkills');
		LiteHudColors[Elem_GenocideRank] = CVar.FindCVar('wt_lite_color_genociderank');
		LiteHudColors[Elem_PlayerRank] = CVar.FindCVar('wt_lite_color_playerrank');
		LiteHudColors[Elem_WeaponName] = CVar.FindCVar('wt_lite_color_weaponname');
		LiteHudColors[Elem_WeaponRank] = CVar.FindCVar('wt_lite_color_weaponrank');
		LiteHudColors[Elem_WeaponKills] = CVar.FindCVar('wt_lite_color_weaponkills');

		Initialize(false);
	}

	void Initialize(bool reset)
	{
		FolderInit();
		ProjectileBinds = Dictionary.Create();

		if (reset)
		{
			WeaponStorage.ResetToDefault();
			ExperienceStorage.ResetToDefault();
			PrestigeStorage.ResetToDefault();

			WeaponStats = Dictionary.Create();
			Experience = 0;
			Prestige = 0;
		}
		else
		{
			WeaponStats = Dictionary.FromString(WeaponStorage.GetString());
			Experience = ExperienceStorage.GetInt();
			Prestige = PrestigeStorage.GetInt();
		}
	}

	// --------------------------------------------------
	// VARIABLE UPDATES & OTHER
	// --------------------------------------------------

	override void WorldTick()
	{
		// [Ace] 10 tics should be enough so that SetString doesn't shit the bed.
		if (WeaponStats && level.time % 10 == 0)
		{
			WeaponStorage.SetString(WeaponStats.ToString());
			ExperienceStorage.SetInt(Experience);
			PrestigeStorage.SetInt(Prestige);
		}

		// [Ace] Update weapon.
		if (level.time % 5 == 0)
		{
			// [Ace] This will desync. You have been warned. I have been warned.
			let plr = PlayerPawn(players[consoleplayer].mo);
			if (plr && plr.player && plr.player.ReadyWeapon)
			{
				ReadyWeapon = plr.player.ReadyWeapon.GetClass();
			}
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		IsUiProcessor = false;
		DrawUi = false;
	}

	// --------------------------------------------------
	// PROGRESS ERASING
	// --------------------------------------------------

	private void ResetTally()
	{
		Initialize(true);
		Console.Printf("All statistics successfully reset!");
	}

	private void ResetWeapon()
	{
		if (WeaponStats)
		{
			WeaponStats.Remove(ReadyWeapon.GetClassName());
		}
		Console.Printf("Weapon statistics successfully reset!");
	}

	// --------------------------------------------------
	// MISCELLANEOUS
	// --------------------------------------------------

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "WT_ResetTally")
		{
			ResetTally();
		}

		if (e.Name ~== "WT_ResetWeapon")
		{
			ResetWeapon();
		}

		if (e.Name ~== "WT_ToggleUI")
		{
			DrawUi = !DrawUi;
			self.IsUiProcessor = !self.IsUiProcessor;
		}

		if (e.Name ~== "WT_UpgradePrestige")
		{
			UpgradePrestige();
		}
	}
}