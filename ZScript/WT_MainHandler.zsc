class WT_MainHandler : StaticEventHandler
{
	enum WT_IwadFilter
	{
		Filter_None,
		Filter_Doom,
		Filter_Heretic,
		Filter_Hexen,
		Filter_Strife,
		Filter_All
	}

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	void RegisterKill(Name wpn, class<Actor> victim)
	{
		class<Weapon> wpncls = wpn;
		if (!wpncls)
		{
			return;
		}

		WT_WeaponData Weapon = FindWeapon(wpncls);

		// [Ace] If weapon exists, update info.
		if (Weapon)
		{
			WT_MonsterData Monster = Weapon.FindMonster(victim);
			if (Monster)
			{
				Monster.Kills++;
			}
			else
			{
				Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

				Weapon.Monsters.Push(Monster);
			}
			if (SelectedWeaponWorld == wpn)
			{
				SelWeaponKills++;
			}
			TotalKillsEver++;
		}
		// [Ace] Otherwise create a new weapon.
		else
		{
			Weapon = new ("WT_WeaponData");

			string WeaponName = wpncls.GetClassName();
			WeaponName = WeaponName.MakeLower();

			Weapon.DictionaryName = WeaponName;
			Weapon.Object = wpncls;
			Weapon.FolderName = FolderBindings.At(WeaponName);

				WT_MonsterData Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

			Weapon.Monsters.Push(Monster);

			AllWeapons.Push(Weapon);
			InitLiteHud();
		}

		double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
		int SkillNumber = min(4, (G_SkillPropertyInt(SKILLP_ACSReturn) + 1));
		int ExperienceGained = int(min(12000, GetDefaultByType(victim).Health) * 0.05 * SkillNumber * FastMonstersMult);

		Experience += ExperienceGained;

		PlayKillSound();
	}

	private void PlayKillSound()
	{
		S_StartSound("WT/KillSound"..KillSoundType.GetInt(), CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	private void UpgradePrestige()
	{
		Prestige++;
		int ExtraExperience = Experience - XPReq[XPReq.Size() - 1];
		Experience = ExtraExperience;
		S_StartSound("WT/Prestige", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	// --------------------------------------------------
	// DEATH STUFF
	// --------------------------------------------------

	// [Ace] WTD gets called *after* the damage is dealt. Just sayin'.
	// 10 bucks it's going to break with Hideous Destructor.
	// 20 bucks I won't be able to fix it.
	// 30 bucks I'm not paying up if I lose.
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER && e.Thing.Health <= 0 && !IsBlacklisted(e.Thing.GetClass()))
		{
			if (e.Inflictor) // [Ace] See if maybe actor is mapped.
			{
				if (e.Inflictor.master && e.Inflictor.master.player == players[consoleplayer])
				{
					// [Ace] Check special cases first.
					switch (e.Inflictor.GetClassName())
					{
						case 'HDSoulCube': RegisterKill('HDSoulCube', e.Thing.GetClass()); return;
					}
				}

				string Inf = e.Inflictor.GetClassName();
				string WeaponUsed = InflictorBinds.At(Inf.MakeLower());
				if (WeaponUsed != "")
				{
					Array<string> SplitString;
					WeaponUsed.Split(SplitString, "||");

					if (!IsBlacklisted(SplitString[0]) && consoleplayer == int(SplitString[1].ToDouble()))
					{
						RegisterKill(SplitString[0], e.Thing.GetClass());
						return;
					}
				}
			}

			// [Ace] Hitscans and everything else.
			if (e.DamageSource is 'PlayerPawn' && e.DamageSource.player == players[consoleplayer])
			{
				switch (e.DamageType)
				{
					case 'Telefrag': RegisterKill('WT_Telefrag', e.Thing.GetClass()); break;
					case 'GloryKill': RegisterKill('WT_D4TGloryKills', e.Thing.GetClass()); break;
					default:
						if (SelectedWeaponWorld && !IsBlacklisted(SelectedWeaponWorld))
						{
							RegisterKill(SelectedWeaponWorld.GetClassName(), e.Thing.GetClass());
						}
						break;
				}
			}
		}
	}

	// --------------------------------------------------
	// DAMAGER TO WEAPON ASSIGNMENT
	// --------------------------------------------------

	override void WorldThingSpawned(WorldEvent e)
	{
		if (!e.Thing) // [Ace] How???
		{
			return;
		}

		// [Ace] Go through the entire pointer chain until you either run out of iterations or finally find the player. When you do, store their weapon.
		PlayerPawn ActT; 
		Actor NextT = e.Thing.target;

		for (int i = 0; i < 6; ++i) // [Ace] Used to prevent infinite recursion.
		{
			if (NextT is 'PlayerPawn')
			{
				ActT = PlayerPawn(NextT);
				break;
			}
			else if (NextT)
			{
				NextT = NextT.target;
			}
		}

		int PlayerNum = -1;
		if (SelectedWeaponWorld)
		{
			if (ActT)
			{
				PlayerNum = ActT.PlayerNumber();
			}

			if (PlayerNum > -1)
			{
				string Act = e.Thing.GetClassName();
				string Wpn = SelectedWeaponWorld.GetClassName().."||"..PlayerNum;
				InflictorBinds.Insert(Act.MakeLower(), Wpn.MakeLower());
			}
		}
	}

	// --------------------------------------------------
	// PROGRESS ERASING
	// --------------------------------------------------

	private void ResetTally()
	{
		ResetProgress();
		Console.Printf("All statistics successfully reset!");
	}

	private void ResetWeapon()
	{
		let wpn = FindWeapon(SelectedWeaponWorld);
		if (wpn)
		{
			AllWeapons.Delete(AllWeapons.Find(wpn));
			InitLiteHud();
		}
		Console.Printf("Weapon statistics successfully reset!");
	}

	// --------------------------------------------------
	// MISCELLANEOUS
	// --------------------------------------------------

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Player != consoleplayer) return;

		if (e.Name ~== "WT_ForceSave")
		{
			SaveData(true, true);
		}

		if (e.Name ~== "WT_InitWeaponFolders")
		{
			InitWeaponFolders();
			InitLiteHud();
		}

		if (e.Name ~== "WT_ReInitialize")
		{
			InitLiteHud();
			InitScorecard(SelectedPage);
		}

		if (e.Name ~== "WT_ResetTally")
		{
			ResetTally();
		}

		if (e.Name ~== "WT_ResetWeapon")
		{
			ResetWeapon();
		}

		if (e.Name ~== "WT_PreviousPage")
		{
			SwitchScorecardPage(SelectedPage - 1);
		}

		if (e.Name ~== "WT_NextPage")
		{
			SwitchScorecardPage(SelectedPage + 1);
		}

		if (e.Name ~== "WT_PreviousWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex - 1);
		}

		if (e.Name ~== "WT_NextWeapon")
		{
			SelectWeaponInList(SelectedWeaponListIndex + 1);
		}

		if (e.Name ~== "WT_ToggleUI")
		{
			DrawUi = !DrawUi;
			self.IsUiProcessor = !self.IsUiProcessor;
			S_StartSound(DrawUi ? "WT/ScorecardOpen" : "WT/ScorecardClose", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);

			if (DrawUi)
			{
				SwitchScorecardPage(Page_Main);
			}
			else
			{
				SelectLiteWeapon();
			}
		}

		if (e.Name ~== "WT_ClearFilter")
		{
			SearchFilter = "";
		}

		if (e.Name ~== "WT_EraseLastFilterChar")
		{
			SearchFilter.DeleteLastCharacter();
		}

		if (e.Name ~== "WT_AppendFilterChar")
		{
			SearchFilter = SearchFilter..String.Format("%c", e.Args[0]);
		}

		if (e.Name ~== "WT_UpgradePrestige" && !e.IsManual)
		{
			UpgradePrestige();
		}

		if (e.Name ~== "WT_ToggleSaving")
		{
			SetSavingStatus(DisableSaving);
		}
	}
}