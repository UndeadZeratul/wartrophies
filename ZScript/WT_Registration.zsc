extend class WT_MainHandler
{
	enum ValidityFlags
	{
		VAF_NOCOUNTKILL = 1,
		VAF_FRIENDLY = 2
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		int valid = Validity.GetInt();
		if (demoplayback || !e.Thing || !e.Thing.bISMONSTER || e.Thing.Health > 0 || !e.Thing.bCOUNTKILL && !(valid & VAF_NOCOUNTKILL) || e.Thing.bFRIENDLY && !(valid & VAF_FRIENDLY))
		{
			return;
		}

		PlayerPawn plr = players[consoleplayer].mo;

		// [Ace] Check for compatibility stuff.
		if (e.DamageSource && (e.DamageSource.Master == plr || e.DamageSource.Target == plr))
		{
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				let cls = (class<WT_CompatItem>)(AllActorClasses[i]);
				if (cls)
				{
					let def = GetDefaultByType(cls);
					if (e.DamageSource is def.CheckedActor)
					{
						RegisterKill(def.GetClassName(), e.Thing.GetClassName());
						return;
					}
				}
			}	
		}

		if (e.Inflictor)
		{
			// [Ace] Deathstrider support start.
			if (e.Inflictor is 'Inventory' && (Inventory(e.Inflictor).Owner == plr || e.Inflictor.Master == plr || e.Inflictor.Target == plr))
			{
				if (IsValid(e.Inflictor.GetClass()))
				{
					RegisterKill(e.Inflictor.GetClassName(), e.Thing.GetClass());
					return;
				}
			}

			if (e.Inflictor.Target is 'Inventory' && (Inventory(e.Inflictor.Target).Owner == plr || e.Inflictor.Target.Master == plr || e.Inflictor.Target.Target == plr))
			{
				if (IsValid(e.Inflictor.Target.GetClass()))
				{
					RegisterKill(e.Inflictor.Target.GetClassName(), e.Thing.GetClass());
					return;
				}
			}
			// [Ace] Deathstrider support end. If anything else works, it's by complete happenstance. At this point I only care enough to support my own mods.

			WT_InflictorInfo bind = FindInflictorBind(e.Inflictor); // [Ace] See if maybe actor is mapped.
			if (bind)
			{
				if (IsValid(bind.WeaponUsed) && bind.OwningPlayer == plr)
				{
					RegisterKill(bind.WeaponUsed, e.Thing.GetClass());
					return;
				}
			}
		}

		// [Ace] Hitscans and everything else.
		if (e.DamageSource is 'PlayerPawn' && e.DamageSource == plr)
		{
			switch (e.DamageType)
			{
				case 'Telefrag': RegisterKill('WT_Telefrag', e.Thing.GetClass()); return;
				default:
				{
					if (SelectedWeaponWorld && IsValid(SelectedWeaponWorld))
					{
						RegisterKill(SelectedWeaponWorld.GetClassName(), e.Thing.GetClass());
					}
					return;
				}
			}
		}
	}

	void RegisterKill(Name wpnName, class<Actor> victim)
	{
		class<Inventory> cls = wpnName;
		if (!cls)
		{
			return;
		}

		WT_WeaponData Weapon = FindWeapon(cls);

		// [Ace] If weapon exists, update info.
		if (Weapon)
		{
			WT_MonsterData Monster = Weapon.FindMonster(victim);
			if (Monster)
			{
				Monster.Kills++;
			}
			else
			{
				Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

				Weapon.Monsters.Push(Monster);
			}
			if (SelectedWeaponWorld == wpnName)
			{
				SelWeaponKills++;
			}
			TotalKillsEver++;
		}
		// [Ace] Otherwise create a new weapon.
		else
		{
			Weapon = new ("WT_WeaponData");

			string WeaponName = cls.GetClassName();
			WeaponName = WeaponName.MakeLower();

			Weapon.DictionaryName = WeaponName;
			Weapon.Object = cls;
			Weapon.FolderName = FolderBindings.At(WeaponName);

				WT_MonsterData Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

			Weapon.Monsters.Push(Monster);

			AllWeapons.Push(Weapon);
			InitLiteHud();
		}

		double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
		int SkillNumber = min(4, (G_SkillPropertyInt(SKILLP_ACSReturn) + 1));
		int ExperienceGained = int(min(12000, abs(GetDefaultByType(victim).Health * 0.05 * SkillNumber * FastMonstersMult)));

		Experience += ExperienceGained;

		PlayKillSound();
	}
}