extend class WT_MainHandler
{
	// [Ace] WTD gets called *after* the damage is dealt. Just sayin'.
	// 10 bucks it's going to break with Hideous Destructor.
	// 20 bucks I won't be able to fix it.
	// 30 bucks I'm not paying up if I lose.
	override void WorldThingDamaged(WorldEvent e)
	{
		if (demoplayback || !e.Thing || !e.Thing.bISMONSTER || e.Thing.Health > 0)
		{
			return;
		}

		if (e.Inflictor) // [Ace] See if maybe actor is mapped.
		{
			// [Ace] I know for sure Deathstrider uses weapons and items for inflictors when dealing damage.
			if (e.Inflictor is 'Inventory' && (Inventory(e.Inflictor).Owner == players[consoleplayer].mo || e.Inflictor.Master == players[consoleplayer].mo || e.Inflictor.Target == players[consoleplayer].mo))
			{
				if (IsValid(e.Inflictor.GetClass()))
				{
					RegisterKill(e.Inflictor.GetClassName(), e.Thing.GetClass());
				}
				return;
			}

			WT_InflictorInfo bind = FindInflictorBind(e.Inflictor);
			if (bind)
			{
				if (IsValid(bind.WeaponUsed) && bind.OwningPlayer == players[consoleplayer].mo)
				{
					RegisterKill(bind.WeaponUsed, e.Thing.GetClass());
					return;
				}
			}
		}

		// [Ace] Hitscans and everything else.
		if (e.DamageSource is 'PlayerPawn' && e.DamageSource == players[consoleplayer].mo)
		{
			switch (e.DamageType)
			{
				case 'Telefrag': RegisterKill('WT_Telefrag', e.Thing.GetClass()); return;
				case 'GloryKill': RegisterKill('WT_D4TGloryKills', e.Thing.GetClass()); return;
				default:
				{
					if (SelectedWeaponWorld && IsValid(SelectedWeaponWorld))
					{
						RegisterKill(SelectedWeaponWorld.GetClassName(), e.Thing.GetClass());
					}
					return;
				}
			}
		}

		// [Ace] Special handling for the follower because I am tired of them stealing my kills. They're technically not a weapon.
		Name FollowerCls = 'HDFollower';
		if (e.DamageSource is FollowerCls && e.DamageSource.Master && e.DamageSource.Master == players[consoleplayer].mo)
		{
			RegisterKill('WT_HDFollower', e.Thing.GetClassName());
		}
	}

	void RegisterKill(Name wpnName, class<Actor> victim)
	{
		class<Inventory> cls = wpnName;
		if (!cls)
		{
			return;
		}

		WT_WeaponData Weapon = FindWeapon(cls);

		// [Ace] If weapon exists, update info.
		if (Weapon)
		{
			WT_MonsterData Monster = Weapon.FindMonster(victim);
			if (Monster)
			{
				Monster.Kills++;
			}
			else
			{
				Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

				Weapon.Monsters.Push(Monster);
			}
			if (SelectedWeaponWorld == wpnName)
			{
				SelWeaponKills++;
			}
			TotalKillsEver++;
		}
		// [Ace] Otherwise create a new weapon.
		else
		{
			Weapon = new ("WT_WeaponData");

			string WeaponName = cls.GetClassName();
			WeaponName = WeaponName.MakeLower();

			Weapon.DictionaryName = WeaponName;
			Weapon.Object = cls;
			Weapon.FolderName = FolderBindings.At(WeaponName);

				WT_MonsterData Monster = new("WT_MonsterData");

				string MonsterName = victim.GetClassName();
				MonsterName = MonsterName.MakeLower();

				Monster.DictionaryName = MonsterName;
				Monster.Object = victim;
				Monster.Kills = 1;

			Weapon.Monsters.Push(Monster);

			AllWeapons.Push(Weapon);
			InitLiteHud();
		}

		double FastMonstersMult = sv_fastmonsters || G_SkillPropertyInt(SKILLP_FastMonsters) ? 2.5 : 1;
		int SkillNumber = min(4, (G_SkillPropertyInt(SKILLP_ACSReturn) + 1));
		int ExperienceGained = int(min(12000, abs(GetDefaultByType(victim).Health * 0.05 * SkillNumber * FastMonstersMult)));

		Experience += ExperienceGained;

		PlayKillSound();
	}
}