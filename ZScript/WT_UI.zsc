extend class WT_MainHandler
{
	enum WT_LiteHudColor
	{
		LElement_Labels,
		LElement_TotalKills,
		LElement_GenocideRank,
		LElement_PlayerRank,
		LElement_WeaponName,
		LElement_WeaponRank,
		LElement_WeaponKills
	}

	enum WT_ScorecardColor
	{
		SElement_Labels,
		SElement_WeaponList,
		SElement_WeaponListAlt,
		SElement_SelectedWeapon,
		SElement_WeaponKills
	}

	// [Ace] Currently used for visibility toggles.
	enum WT_LiteHudVisibilityFlags
	{
		VF_PlayerName		= 1 << 0,
		VF_TotalKills		= 1 << 1,
		VF_GenocideRank		= 1 << 2,
		VF_GenocideMedal	= 1 << 3,
		VF_PlayerRank		= 1 << 4,
		VF_PlayerExperience	= 1 << 5,
		VF_PlayerMedal		= 1 << 6,
		VF_Player_All		= VF_PlayerName | VF_TotalKills | VF_GenocideRank | VF_GenocideMedal | VF_PlayerRank | VF_PlayerExperience | VF_PlayerMedal,

		VF_WeaponName		= 1 << 7,
		VF_WeaponRank		= 1 << 8,
		VF_WeaponKills		= 1 << 9,
		VF_WeaponMedals		= 1 << 10,
		VF_Weapon_All		= VF_WeaponName | VF_WeaponRank | VF_WeaponKills | VF_WeaponMedals
	}

	enum WT_LiteHudStats
	{
		Stats_None,
		Stats_Player,
		Stats_Weapon,
		Stats_All
	}

	// --------------------------------------------------
	// MAIN
	// --------------------------------------------------

	const RankImagesPrefix = "RANK";

	static const int WeaponNameLengths[] =
	{
		// Weapon list in main page, weapon stats in main page, and weapon page.
		// [Ace] One pair for each font.
		17, 30, 30,
		24, 37, 37,
		19, 32, 32
	};

	static const int MonsterNameLengths[] =
	{
		// Monster name in the main page.
		22, 36, // [Ace] Timmy Turner, my name is DougsDaleDimmaDaleDimmaDimmsDomeDoDiDomeDimmsDimmaDimmaDome, Owner of the DougDimmsDimmaDaleDimmsDomeDoDiDimmaDimmsDaleDimmaDimmsDaleDimmaDome. Also monster page.
		26, 40,
		24, 38
	};

	static const int MaxListEntries[] =
	{
		11, // Weapon and monster lists in the main page.
		27 // Weapon and mosnter lists in their specialized page.
	};

	const LiteHudMaxStringWidth = 200; // [Ace] Size in pixels.

	const FontPrefix = "WTFONT";
	private ui Font MainFont;
	private ui HUDFont MainHudFont;

	private ui int SubPage;
	private ui bool InSearchMode;

	private ui int GenocideRank;
	private ui string GenocideRankString;
	private ui int PlayerRank;
	private ui string PlayerRankString;
	private ui int WeaponRank;
	private ui string WeaponRankString;

	override void RenderOverlay(RenderEvent e)
	{
		if (DrawOverHud.GetBool())
		{
			DrawHudStuff();
		}
	}

	override void RenderUnderlay(RenderEvent e)
	{
		if (!DrawOverHud.GetBool())
		{
			DrawHudStuff();
		}
	}

	private ui void DrawHudStuff()
	{
		MainFont = Font.GetFont(FontPrefix..UiFont.GetInt() + 1);
		MainHudFont = HUDFont.Create(MainFont);

		int LiteHud = LiteHudType.GetInt();

		int OriginalWidth = StatusBar.HorizontalResolution;
		int OriginalHeight = StatusBar.VerticalResolution;

		StatusBar.BeginHUD(1.0, true);

		// --------------- LITE HUD ---------------

		if (LiteHud > Stats_None && !DrawUi && !AutomapActive && GameState == GS_LEVEL)
		{
			double Alpha = LiteHudAlpha.GetFloat();
			double Scale = LiteHudScale.GetFloat();
			int VisiblityFlags = LiteHudVisibilityFlags.GetInt();

			// [Ace] Dividing because smaller numbers means bigger HUD.
			if (Scale > 0)
			{
				StatusBar.SetSize(StatusBar.RelTop, int(640 / Scale), int(480 / Scale));
			}

			vector2 OffsetMult = (LiteHudOffsetX.GetFloat(), LiteHudOffsetY.GetFloat());
			vector2 LiteOffset = (StatusBar.HorizontalResolution * (OffsetMult.X > 2.0 ? 0 : OffsetMult.X), StatusBar.VerticalResolution * (OffsetMult.Y > 2.0 ? 0 : OffsetMult.Y));

			vector2 PlayerStatsSize = (0, 0);
			if (LiteHud != Stats_Weapon && VisiblityFlags & VF_Player_All != 0)
			{
				PlayerStatsSize = DrawLiteHudPlayerStats(StatusBar, (2, 2) + LiteOffset, VisiblityFlags, Alpha);
			}

			// [Ace] Don't update available weapons if the weapon stats aren't visible. It'd be a waste of VM time.
			if (LiteHud != Stats_Player && VisiblityFlags & VF_Weapon_All != 0)
			{
				if (SelectedWeaponLite)
				{
					vector2 Pos = (2, 2);

					switch(LiteHudOrientation.GetInt())
					{
						case 0: Pos.Y += PlayerStatsSize.Y; break;
						case 1: Pos.X += PlayerStatsSize.X; break;
					}

					DrawLiteHudWeaponStats(StatusBar, SelectedWeaponLite, Pos +LiteOffset, VisiblityFlags, Alpha);
				}
			}
		}

		// --------------- SCORECARD ---------------
		else if (DrawUi)
		{
			double Scale = ScorecardScale.GetFloat();
			if (Scale > 0)
			{
				StatusBar.SetSize(StatusBar.RelTop, int(480 / Scale), int(320 / Scale));
			}
			switch (SelectedPage)
			{
				case Page_Main:
					DrawScorecardMain(StatusBar);
					break;
				case Page_Weapons:
					DrawScorecardWeapons(StatusBar);
					break;
				case Page_Monsters:
					DrawScorecardMonsters(StatusBar);
					break;
			}
		}

		if (!AutomapActive && DisableSaving)
		{
			StatusBar.DrawString(MainHudFont, "KILL SAVING DISABLED", (-2, 2), BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
		}

		// --------------- PRETEND WE WERE NEVER HERE ---------------

		// [Ace] God help me.
		int Blocks = ScreenBlocks.GetInt();
		if (Blocks < 11 || AutomapActive)
		{
			StatusBar.BeginStatusBar(false);
		}
		else
		{
			StatusBar.BeginHUD(1.0, false);
		}
		StatusBar.SetSize(StatusBar.RelTop, OriginalWidth, OriginalHeight);
	}

	// --------------------------------------------------------------
	// LITE HUD - PLAYER
	// --------------------------------------------------------------

	private ui vector2 DrawLiteHudPlayerStats(BaseStatusBar sbar, vector2 pos, int visFlags, double alpha)
	{
		vector2 TotalSize = (0, 0);

		int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// Total kills.
		if (visFlags & VF_PlayerName)
		{
			string PlayerName = sbar.CPlayer.GetUserName();
			sbar.DrawString(MainHudFont, PlayerName, (pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.CR_UNTRANSLATED, alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(PlayerName));
			TotalSize.Y += 14;
		}

		// Total kills.
		if (visFlags & VF_TotalKills)
		{
			string TotalKillsString = "\c["..GetLiteColor(LElement_Labels).."]Total: \c["..GetLiteColor(LElement_TotalKills).."]"..sbar.FormatNumber(TotalKillsEver, 1, 10).."\c-";
			sbar.DrawString(MainHudFont, TotalKillsString, (pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.CR_UNTRANSLATED, alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(TotalKillsString));
			TotalSize.Y += 10;
		}

		// Genocide rank.
		GetRank(Type_Genocide, TotalKillsEver, GenocideRank, GenocideRankString);
		if (visFlags & VF_GenocideRank)
		{
			sbar.DrawString(MainHudFont, GenocideRankString, (pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_GenocideRank)), alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(GenocideRankString));
			TotalSize.Y += 10;
		}

		// [Ace] Separates sections.
		if (visFlags & VF_GenocideRank || visFlags & VF_TotalKills)
		{
			TotalSize.Y += 4;
		}

		// Player rank & prestige.
		GetRank(Type_Player, Experience, PlayerRank, PlayerRankString);
		if (visFlags & VF_PlayerRank)
		{
			if (Prestige > 0)
			{
				sbar.DrawImage("PRSTIGE"..Prestige, (pos.x + 6, pos.y + TotalSize.Y + 2), DI_TL, alpha, (13, 13));
			}
			sbar.DrawString(MainHudFont, PlayerRankString, (Prestige > 0 ? pos.x + 12 : pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_PlayerRank)), alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(PlayerRankString)) + (Prestige > 0 ? 8 : 0);
			TotalSize.Y += 10;
		}

		// Player experience.
		if (visFlags & VF_PlayerExperience)
		{
			string ExperienceString = "\c["..GetLiteColor(LElement_Labels).."]XP: \c["..GetLiteColor(LElement_PlayerRank).."]"..sbar.FormatNumber(Experience, 1, 7).."\c-";
			sbar.DrawString(MainHudFont, ExperienceString, (pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.CR_UNTRANSLATED, alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(ExperienceString));
			TotalSize.Y += 10;

			// Player experience for next level.
			string NextPlayerRankExp = "\c["..GetLiteColor(LElement_Labels).."]NX: \c["..GetLiteColor(LElement_PlayerRank).."]"..(PlayerRank + 1 < XPReq.Size() ? sbar.FormatNumber(XPReq[PlayerRank + 1], 1, 7) : "-").."\c-";
			sbar.DrawString(MainHudFont, NextPlayerRankExp, (pos.x, pos.y + TotalSize.Y), DI_TL_TEXT_LEFT, Font.CR_UNTRANSLATED, alpha);

			TotalSize.X = max(TotalSize.X, MainFont.StringWidth(NextPlayerRankExp));
			TotalSize.Y += 10;
		}

		// Player medal.
		if (visFlags & VF_PlayerMedal)
		{
			sbar.DrawImage(RankImagesPrefix..(PlayerRank + 1), (pos.x + 22, pos.y + TotalSize.Y + 22), DI_TL, alpha, (40, 40));
			TotalSize.X = max(TotalSize.X, 35);
		}

		// Genocide medal.
		if (visFlags & VF_GenocideMedal)
		{
			sbar.DrawImage("G"..RankImagesPrefix..GenocideRank, (pos.x + (visFlags & VF_PlayerMedal ? 62 : 22), pos.y + TotalSize.Y + 24), DI_TL, alpha, (40, 40));
			TotalSize.X = max(TotalSize.X, (visFlags & VF_PlayerMedal ? 70 : 35));
		}

		// [Ace] If any of the medals are present, bump the Y offset.
		if (visFlags & VF_PlayerMedal || visFlags & VF_GenocideMedal)
		{
			TotalSize.Y += 46;
		}

		// [Ace] Add a small gap after the player stats.
		TotalSize.Y += 2;
		TotalSize.X += 10;

		return TotalSize;
	}

	// --------------------------------------------------------------
	// LITE HUD - WEAPON
	// --------------------------------------------------------------

	private ui void DrawLiteHudWeaponStats(BaseStatusBar sbar, WT_WeaponData wpn, vector2 pos, int visFlags, double alpha)
	{
		int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_LEFT_TOP;
		int DI_TC = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_TOP;
		int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		double NextOffsetY = pos.y;

		// Weapon name.
		if (visFlags & VF_WeaponName)
		{
			BrokenLines MultilineName = MainFont.BreakLines(GetWeaponName(wpn, LiteFolderView.GetInt()), LiteHudMaxStringWidth);
			for (int i = 0; i < MultilineName.Count(); ++i)
			{
				NextOffsetY += 10 * i;
				sbar.DrawString(MainHudFont, MultilineName.StringAt(i), (pos.x, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_WeaponName)), alpha);
			}
			NextOffsetY += 10;
		}
		
		// Weapon rank.
		GetRank(Type_Weapons, SelWeaponKills, WeaponRank, WeaponRankString);
		if (visFlags & VF_WeaponRank)
		{
			sbar.DrawString(MainHudFont, WeaponRankString, (pos.x, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_WeaponRank)), alpha);
			NextOffsetY += 10;
		}

		if (visFlags & VF_WeaponName || visFlags & VF_WeaponRank)
		{
			NextOffsetY += 4;
		}

		if (visFlags & VF_WeaponKills)
		{
			// Weapon kills.
			sbar.DrawString(MainHudFont, "K:", (pos.x, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_Labels)), alpha);
			sbar.DrawString(MainHudFont, sbar.FormatNumber(SelWeaponKills, 1, 6), (pos.x + 14, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_WeaponKills)), alpha);
			NextOffsetY += 10;

			// Weapon kills for next level.
			string NextWeaponRankKills = WeaponRank + 1 < WeapKillReq.Size() ? sbar.FormatNumber(WeapKillReq[WeaponRank + 1], 1, 6) : "-";
			sbar.DrawString(MainHudFont, "NX:", (pos.x, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_Labels)), alpha);
			sbar.DrawString(MainHudFont, NextWeaponRankKills, (pos.x + 24, NextOffsetY), DI_TL_TEXT_LEFT, Font.FindFontColor(GetLiteColor(LElement_WeaponRank)), alpha);
			NextOffsetY += 14;
		}

		// Weapon medals.
		if (visFlags & VF_WeaponMedals)
		{
			DrawMedals("WMEDAL", SelWeaponKills, 3, 3, 11, 9, (6 + pos.x, NextOffsetY), (11, 19), (-1, -1), DI_TC, alpha);
		}
	}

	// --------------------------------------------------------------
	// SCORECARD - MAIN
	// --------------------------------------------------------------

	private ui void DrawScorecardMain(BaseStatusBar sbar)
	{
		int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TL = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_LEFT_TOP;
		int DI_TC = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_TOP;
		int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// --------------- GRAPHIC ---------------
		
		sbar.DrawImage(GetScorecardGraphic(Page_Main), (0, 0.5), DI_CENTER); // [Ace] 0.5 because nearest neighbour scaling is not your friend.

		// --------------- MAIN STATS ---------------

		// Total kills.
		sbar.DrawString(MainHudFont, "TOTAL:", (-223, -84), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		sbar.DrawString(MainHudFont, sbar.FormatNumber(TotalKillsEver, 1, 10), (-42, -84), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Red"));

		// Genocide rank.
		GetRank(Type_Genocide, TotalKillsEver, GenocideRank, GenocideRankString);
		sbar.DrawString(MainHudFont, GenocideRankString, (-223, -60), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_FadedRed"));

		// Genocide medal.
		sbar.DrawImage("G"..RankImagesPrefix..GenocideRank, (-206, 77), DI_CENTER, 1.0, (36, 36));

		// Player rank.
		GetRank(Type_Player, Experience, PlayerRank, PlayerRankString);
		sbar.DrawString(MainHudFont, PlayerRankString, (-223, -36), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_DarkGreen"));

		// Player prestige.
		sbar.DrawImage("PRSTIGE"..Prestige, (-45, -32.5), DI_CENTER, 1.0, (13, 13));

		// Player experience.
		sbar.DrawString(MainHudFont, "XP:", (-223, -12), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		sbar.DrawString(MainHudFont, sbar.FormatNumber(Experience, 1, 7), (-139, -12), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_DarkGreen"));

		// Player experience for next level.
		sbar.DrawString(MainHudFont, "NX:", (-126, -12), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		string NextPlayerRankExp = PlayerRank + 1 < XPReq.Size() ? sbar.FormatNumber(XPReq[PlayerRank + 1], 1, 7) : "-";
		sbar.DrawString(MainHudFont, NextPlayerRankExp, (-42, -12), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_DarkGreen"));

		// Player medal.
		sbar.DrawImage(RankImagesPrefix..(PlayerRank + 1), (-206, 28), DI_CENTER, 1.0, (36, 36));

		// Max weapon rank medals.
		DrawMedals("WMAXMDL", MaxRankMedals, 1, 3, 3, 4, (-219, 109), (13, 13), (13, 13), DI_TC, 1.0);

		// --------------- WEAPON LIST ---------------

		int WeaponPagesTotal = GetPages(AvailableWeapons.Size(), MaxListEntries[0]);
		int WeaponPage = SelectedWeaponListIndex / MaxListEntries[0];

		string Title = InSearchMode ? SearchFilter.."_" : (SearchFilter != "" ? SearchFilter : "All Weapons");
		sbar.DrawString(MainHudFont, Title, (-174, 12), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		sbar.DrawString(MainHudFont, (WeaponPage + 1).."/"..WeaponPagesTotal, (-42, 12), DI_TEXT_RIGHT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));

		for (int i = 0; MaxListEntries[0] * WeaponPage + i < AvailableWeapons.Size() && i < MaxListEntries[0]; ++i)
		{
			let CurrWeapon = AvailableWeapons[MaxListEntries[0] * WeaponPage + i];
			
			sbar.DrawString(MainHudFont, GetTruncatedText(GetActorTag(CurrWeapon.Object), WeaponNameLengths[0 + 3 * UiFont.GetInt()]), (-174, 36 + 9 * i), DI_TEXT_LEFT, SelectedWeaponList == CurrWeapon ? Font.FindFontColor(GetScorecardColor(SElement_SelectedWeapon)) : Font.FindFontColor(GetScorecardColor(SElement_WeaponList)));
		}

		// --------------- WEAPON STATS ---------------

		if (SelectedWeaponList)
		{
			// Weapon name.
			sbar.DrawString(MainHudFont, GetTruncatedText(GetActorTag(SelectedWeaponList.Object), WeaponNameLengths[1 + 3 * UiFont.GetInt()]), (-7, -132), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_White"));

			// Weapon rank.
			GetRank(Type_Weapons, SelWeaponKills, WeaponRank, WeaponRankString);
			sbar.DrawString(MainHudFont, WeaponRankString, (-7, -108), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_Gold"));
			sbar.DrawString(MainHudFont, WeaponRank.."/"..WeapKillReq.Size() - 1, (223, -108), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Gold"));

			// Weapon kills.
			sbar.DrawString(MainHudFont, "K:", (-7, -84), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
			sbar.DrawString(MainHudFont, sbar.FormatNumber(SelWeaponKills, 1, 6), (66, -84), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Red"));

			// Weapon kills for next level.
			sbar.DrawString(MainHudFont, "NX:", (80, -84), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
			string NextWepRankReq = WeaponRank + 1 < WeapKillReq.Size() ? sbar.FormatNumber(WeapKillReq[WeaponRank + 1], 1, 6) : "-";
			sbar.DrawString(MainHudFont, NextWepRankReq, (152, -84), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Gold"));

			// Weapon preference.
			sbar.DrawString(MainHudFont, "P:", (167, -84), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
			if (TotalKillsAvailable > 0)
			{
				double Pref = SelWeaponKills / double(TotalKillsAvailable) * 100;
				sbar.DrawString(MainHudFont, (Pref < 100 ? String.Format("%.2f", Pref) : String.Format("%i", Pref)).."%", (223, -84), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Grey"));
			}

			// Weapon icon.
			string SpriteToDraw = "";
			TextureID Icon = GetDefaultByType(SelectedWeaponList.Object).Icon;
			if (Icon.IsValid())
			{
				SpriteToDraw = TexMan.GetName(Icon);
			}
			else
			{
				// [Ace] Loops either until NextState is null or until it starts back from the beginning.
				State SpawnState = GetDefaultByType(SelectedWeaponList.Object).SpawnState;
				State CurrState = SpawnState;
				for (int i = 0; i < 30 && CurrState != null; ++i)
				{
					string SpriteName = TexMan.GetName(CurrState.GetSpriteTexture(0));
					if (SpriteName != "TNT1A0")
					{
						SpriteToDraw = SpriteName;
						break;
					}
					CurrState = CurrState.NextState;
				}
			}
			
			// [Ace] Scale down sprites if they're too large to fit in the display.
			TextureID Img = TexMan.CheckForTexture(SpriteToDraw, TexMan.Type_Any);
			vector2 ImgSize;
			[ImgSize.x, ImgSize.y] = TexMan.GetSize(Img);
			vector2 Box = (ImgSize.X > 90 ? 90 : -1, ImgSize.Y > 56 ? 56 : -1);
			sbar.DrawImage(SpriteToDraw, (40, -33), DI_CENTER, 1.0, Box);

			// Weapon medals.
			DrawMedals("WMEDAL", SelWeaponKills, 3, 3, 11, 9, (102, -61), (11, 19), (-1, -1), DI_TL, 1.0);

			// --------------- MONSTER LIST & STATS ---------------

			sbar.DrawString(MainHudFont, "Monsters", (-7, 12), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_FadedBlue"));
			sbar.DrawString(MainHudFont, "Kills", (224, 12), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_FadedBlue"));

			// [Ace] Then display them.
			sbar.DrawString(MainHudFont, (SubPage + 1).."/"..GetPages(AvailableMonsters.Size(), MaxListEntries[0]), (160, 12), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_FadedBlue"));

			int StartIndex = MaxListEntries[0] * SubPage;
			int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
			for (int i = StartIndex; i < AvailableMonsters.Size() && mRow < MaxListEntries[0]; ++i)
			{
				let CurrMonster = AvailableMonsters[i];

				// Name.
				sbar.DrawString(MainHudFont, GetTruncatedText(GetActorTag(CurrMonster.Object), MonsterNameLengths[0 + 2 * UiFont.GetInt()]), (-7, 36 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_FadedBlue"));

				// Kills.
				sbar.DrawString(MainHudFont, sbar.FormatNumber(CurrMonster.Kills, 1, 5), (224, 36 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_FadedBlue"));
				
				mRow++;
			}
		}
	}

	// --------------------------------------------------------------
	// SCORECARD - WEAPONS
	// --------------------------------------------------------------

	private ui void DrawScorecardWeapons(BaseStatusBar sbar)
	{
		int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// --------------- GRAPHIC ---------------
		
		sbar.DrawImage(GetScorecardGraphic(Page_Weapons), (0, 0.5), DI_CENTER);

		// --------------- WEAPON LIST & STATS ---------------

		// Labels.
		sbar.DrawString(MainHudFont, "Weapons", (-173, -132), DI_TEXT_LEFT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		sbar.DrawString(MainHudFont, "Kills", (116, -132), DI_TEXT_RIGHT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));
		sbar.DrawString(MainHudFont, "Pref.", (174, -132), DI_TEXT_RIGHT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));

		// [Ace] Then display them.
		sbar.DrawString(MainHudFont, (SubPage + 1).."/"..GetPages(AvailableWeapons.Size(), MaxListEntries[1]), (47, -132), DI_TEXT_RIGHT, Font.FindFontColor(GetScorecardColor(SElement_Labels)));

		int StartIndex = MaxListEntries[1] * SubPage;
		int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
		for (int i = StartIndex; i < AvailableWeapons.Size() && mRow < MaxListEntries[1]; ++i)
		{
			bool AlternateColor = i % 2;
			let CurrWeapon = AvailableWeapons[i];
			int WeaponKills = CurrWeapon.GetKills();

			// Name.
			sbar.DrawString(MainHudFont, GetTruncatedText(GetActorTag(CurrWeapon.Object), WeaponNameLengths[2 + 3 * UiFont.GetInt()]), (-173, -107 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor(AlternateColor ? GetScorecardColor(SElement_WeaponListAlt) : GetScorecardColor(SElement_WeaponList)));

			// Kills.
			sbar.DrawString(MainHudFont, sbar.FormatNumber(WeaponKills, 1, 5), (116, -107 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor(AlternateColor ? "WT_Old_FadedRedAlt" : "WT_Old_FadedRed"));

			// Preference.
			double Pref = WeaponKills / double(TotalKillsAvailable) * 100;
			sbar.DrawString(MainHudFont, (Pref < 100 ? String.Format("%.2f", Pref) : String.Format("%i", Pref)).."%", (174, -107 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_Grey"));

			mRow++;
		}
	}

	// --------------------------------------------------------------
	// SCORECARD - MONSTERS
	// --------------------------------------------------------------

	private ui void DrawScorecardMonsters(BaseStatusBar sbar)
	{
		int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// --------------- GRAPHIC ---------------
		
		sbar.DrawImage(GetScorecardGraphic(Page_Monsters), (0, 0.5), DI_CENTER);

		// --------------- MONSTER LIST & STATS ---------------

		// Labels.
		sbar.DrawString(MainHudFont, "Monsters", (-173, -132), DI_TEXT_LEFT, Font.FindFontColor("WT_Old_FadedBlue"));
		sbar.DrawString(MainHudFont, "T. Kills", (174, -132), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_FadedBlue"));

		// [Ace] Then display them.
		sbar.DrawString(MainHudFont, (SubPage + 1).."/"..GetPages(AvailableMonsters.Size(), MaxListEntries[1]), (110, -132), DI_TEXT_RIGHT, Font.FindFontColor("WT_Old_FadedBlue"));

		int StartIndex = MaxListEntries[1] * SubPage;
		int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
		for (int i = StartIndex; i < AvailableMonsters.Size() && mRow < MaxListEntries[1]; ++i)
		{
			bool AlternateColor = i % 2;
			let CurrMonster = AvailableMonsters[i];

			// Name.
			sbar.DrawString(MainHudFont, GetTruncatedText(GetActorTag(CurrMonster.Object), MonsterNameLengths[1 + 2 * UiFont.GetInt()]), (-173, -107 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor(AlternateColor ? "WT_Old_FadedBlueAlt" : "WT_Old_FadedBlue"));

			// Kills.
			sbar.DrawString(MainHudFont, sbar.FormatNumber(CurrMonster.Kills, 1, 5), (174, -107 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor(AlternateColor ? "WT_Old_FadedBlueAlt" : "WT_Old_FadedBlue"));

			mRow++;
		}
	}

	// --------------------------------------------------
	// FUNCTIONS
	// --------------------------------------------------

	private ui void DrawMedals(string medalPrefix, int totalAmount, int amountPerMedal, int medalsPerUpgrade, int medalsPerLine, int typeCount, vector2 pos, vector2 drawBox, vector2 scaleBox, int flags, double alpha)
	{
		Array<int> MedalCount; // [Ace] Each integer denotes how many medals of a given type there should be, starting at the highest type.
		MedalCount.Reserve(typeCount);

		int TotalNumberOfMedals = totalAmount / amountPerMedal; // [Ace] More precisely, total number of tier 1 medals.
		for (int i = typeCount; i > 0; --i)
		{
			// [Ace] I'm not going to remember how this works a week from now.
			int MedalsForThisType = TotalNumberOfMedals / int(medalsPerUpgrade ** (i - 1));
			TotalNumberOfMedals -= MedalsForThisType * int(medalsPerUpgrade ** (i - 1));

			MedalCount[typeCount - i] = MedalsForThisType;
		}

		int MedalsShown = 0;
		for (int i = 0; i < typeCount; ++i)
		{
			MedalsShown += MedalCount[i];
			for (int j = 0; j < MedalCount[i]; ++j)
			{
				// [Ace] I'm definitely not going to remember how this works. I hate maths.
				int XOffset = (j + (MedalsShown - MedalCount[i]));
				int TotalXOffset = int(drawBox.x * (XOffset % medalsPerLine));
				int WStatsOffsetY = int(drawBox.y * (XOffset / medalsPerLine));
				StatusBar.DrawImage(medalPrefix..(typeCount - i), (pos.x + TotalXOffset, pos.y + WStatsOffsetY), flags, alpha, scaleBox);
			}
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private ui void GetRank(WT_RankType type, int currAmount, out int rank, out string rankString)
	{
		int Set = RankSets[type].GetInt();

		switch (type)
		{
			case Type_Genocide:
				// [Ace] The + 1 is to account for the beginner rank. Same in the other cases.
				for (int i = 0; i < GenocideReqs.Size(); ++i)
				{
					if (currAmount >= GenocideReqs[i])
					{
						rank = i;
						rankString = GenocideRanks[GenocideReqs.Size() * Set + rank];
					}
				}
				break;
			case Type_Player:
				for (int i = 0; i < XPReq.Size(); ++i)
				{
					if (currAmount >= XPReq[i])
					{
						rank = i; // [Ace] Because 0 rank has a medal.
						rankString = XPRanks[XPReq.Size() * Set + rank];
					}
				}
				break;
			case Type_Weapons:
				for (int i = 0; i < WeapKillReq.Size(); ++i)
				{
					if (currAmount >= WeapKillReq[i])
					{
						rank = i;
						rankString = WeapRanks[WeapKillReq.Size() * Set + rank];
					}
				}
				break;
		}
	}

	private ui int GetPages(int totalEntries, int maxEntries) const
	{
		return max(1, int(ceil(totalEntries / double(maxEntries))));
	}

	private ui string GetScorecardGraphic(WT_ScorecardPage page) const
	{
		int Theme = ScorecardTheme.GetInt() + 1;
		switch (page)
		{
			case Page_Main: return DarkerDisplays.GetBool() ? "WTSTP"..Theme.."B" : "WTSTP"..Theme.."N";
			case Page_Weapons: return DarkerDisplays.GetBool() ? "WTSTW"..Theme.."B" : "WTSTW"..Theme.."N";
			case Page_Monsters: return DarkerDisplays.GetBool() ? "WTSTM"..Theme.."B" : "WTSTM"..Theme.."N";
		}

		return "Invalid";
	}

	private ui string GetLiteColor(WT_LiteHudColor element) const
	{
		int CvarValue = LiteHudColors[element].GetInt();
		if (CvarValue == 0)
		{
			switch (element)
			{
				case LElement_Labels: return "WT_Old_FadedBrown";
				case LElement_TotalKills: return "WT_Old_Red";
				case LElement_GenocideRank: return "WT_Old_FadedRed";
				case LElement_PlayerRank: return "WT_Old_DarkGreen";
				case LElement_WeaponName: return "WT_Old_White";
				case LElement_WeaponRank: return "WT_Old_Gold";
				case LElement_WeaponKills: return "WT_Old_Red";
			}
		}

		return StringTable.Localize("$HUD_COLOR_"..CvarValue); // [Ace] Invalid colors = black.
	}

	private ui string GetScorecardColor(WT_ScorecardColor element) const
	{
		int Theme = ScorecardTheme.GetInt();
		switch (element)
		{
			// [Ace] The default values are the colors for the classic WarTrophies scorecard.
			case SElement_Labels:
				switch (Theme)
				{
					default: return "WT_Old_FadedBrown";
					case 1: return "WT_LightSteelBlue";
					case 2: return "WT_Old_Orange";
					case 3: return "WT_LightSteelBlue";
				}
			case SElement_WeaponList:
				switch (Theme)
				{
					default: return "WT_Old_FadedBrown";
					case 1: return "WT_SlateGray";
					case 2: return "WT_Old_FadedOrange";
					case 3: return "WT_SlateGray";
				}
			case SElement_WeaponListAlt:
				switch (Theme)
				{
					default: return "WT_Old_FadedBrownAlt";
					case 1: return "WT_LightSteelBlue";
					case 2: return "WT_Old_FadedOrangeAlt";
					case 3: return "WT_LightSteelBlue";
				}
			case SElement_SelectedWeapon:
				switch (Theme)
				{
					default: return "WT_Old_OrangeRed";
					case 1: return "WT_LightSteelBlue";
					case 2: return "WT_Old_Orange";
					case 3: return "WT_LightSteelBlue";
				}
		}

		return "Invalid";
	}


	private ui string GetTruncatedText(string text, int length) const
	{
		if (text.Length() > length)
		{
			string TruncatedName = text.Mid(0, length);
			TruncatedName.DeleteLastCharacter();
			if (TruncatedName.ByteAt(TruncatedName.Length() - 1) == 32)
			{
				TruncatedName.DeleteLastCharacter();
			}
			text = TruncatedName.."...";
		}

		return text;
	}

	private ui string GetWeaponName(WT_WeaponData wpn, bool useFolder) const
	{
		return useFolder && wpn.FolderName != "" ? wpn.FolderName : GetActorTag(wpn.Object);
	}

	private ui int GetAvailableWeaponsCount() const
	{
		int Count = 0;
		for (int i = 0; i < AllWeapons.Size(); ++i)
		{
			if (AllWeapons[i].Object)
			{
				Count++;
			}
		}

		return Count;
	}

	// --------------------------------------------------
	// INPUT & MISC
	// --------------------------------------------------

	private ui void OnChangeScorecardPage()
	{
		SubPage = 0;
		EventHandler.SendNetworkEvent("WT_ClearFilter");
		S_StartSound("WT/ChangePage", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	private ui void OnChangeWeaponSelection()
	{
		SubPage = 0;
		S_StartSound("WT/SelectWeapon", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
	}

	override bool UiProcess(UiEvent e)
	{
		if ((e.Type == UiEvent.Type_KeyDown || e.Type == UiEvent.Type_KeyRepeat) && DrawUi)
		{
			if (!InSearchMode)
			{
				switch (e.KeyChar)
				{
					// Cycle pages left.
					case UiEvent.Key_Left:
						OnChangeScorecardPage();
						EventHandler.SendNetworkEvent("WT_PreviousPage");
						break;

					// Cycle pages right.
					case UiEvent.Key_Right:
						OnChangeScorecardPage();
						EventHandler.SendNetworkEvent("WT_NextPage");
						break;

					// Move weapon selection up.
					case UiEvent.Key_Up:
						if (SelectedPage != Page_Main) break;
						EventHandler.SendNetworkEvent("WT_PreviousWeapon");
						OnChangeWeaponSelection();
						break;

					// Move weapon selection down.
					case UiEvent.Key_Down:
						if (SelectedPage != Page_Main) break;
						EventHandler.SendNetworkEvent("WT_NextWeapon");
						OnChangeWeaponSelection();
						break;

					// Previous sub-page.
					case UiEvent.Key_PgUp:
						SubPage = max(0, SubPage - 1);
						S_StartSound("WT/ChangeSubPage", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
						break;

					// Next sub-page.
					case UiEvent.Key_PgDn:
						int TotalEntries = 1;
						int MaxEntries = 1;
						switch (SelectedPage)
						{
							case Page_Main:
								TotalEntries = AvailableMonsters.Size();
								MaxEntries = MaxListEntries[0];
								break;
							case Page_Weapons:
								TotalEntries = AvailableWeapons.Size();
								MaxEntries = MaxListEntries[1];
								break;
							case Page_Monsters:
								TotalEntries = AvailableMonsters.Size();
								MaxEntries = MaxListEntries[1];
								break;
						}

						SubPage = min(SubPage + 1, GetPages(TotalEntries, MaxEntries) - 1);
						S_StartSound("WT/ChangeSubPage", CHAN_AUTO, CHANF_UI | CHANF_LOCAL);
						break;

					// Exit menu.
					case UiEvent.Key_Escape:
						EventHandler.SendNetworkEvent("WT_ClearFilter");
						EventHandler.SendNetworkEvent("WT_ToggleUi");
						SubPage = 0;
						break;

					// Enter search mode. Chars: Space
					case 32:
						if (SelectedPage != Page_Main)
						{
							break;
						}
						InSearchMode = true;
						EventHandler.SendNetworkEvent("WT_ClearFilter");
						break;

					// Clear filter.
					case UiEvent.Key_Backspace:
						EventHandler.SendNetworkEvent("WT_ClearFilter");
						EventHandler.SendNetworkEvent("WT_ReInitialize");
						break;

					// [Ace] Upgrade prestige. Chars: 'p' or 'P'.
					// It really bothers me that I'm doing such logic checks in the UI. I'd have to completely mess up the scoping otherwise.
					case 80:
					case 112:
						if (PlayerRank == XPReq.Size() - 1 && Prestige < 3)
						{
							EventHandler.SendNetworkEvent("WT_UpgradePrestige");
						}
						break;

					// Take screenshot.
					case UiEvent.Key_F12:
						LevelLocals.MakeScreenShot();
						break;
				}
			}
			else
			{
				switch (e.KeyChar)
				{
					// Apply filter.
					case UiEvent.Key_Return:
						InSearchMode = false;
						EventHandler.SendNetworkEvent("WT_ReInitialize");
						break;

					// Exit search mode and don't apply filter.
					case UiEvent.Key_Escape:
						EventHandler.SendNetworkEvent("WT_ClearFilter");
						InSearchMode = false;
						break;

					// Delete last character.
					case UiEvent.Key_Backspace:
						EventHandler.SendNetworkEvent("WT_EraseLastFilterChar");
						break;

					default:
						if (SearchFilter.Length() < 13 && e.KeyChar >= 32 && e.KeyChar <= 126) // [Ace] Only valid characters.
						{
							EventHandler.SendNetworkEvent("WT_AppendFilterChar", e.KeyChar);
						}
						break;
				}
			}
		}

		return false;
	}
}