extend class WT_MainHandler
{
	enum WT_HudElementType
	{
		Elem_Labels,
		Elem_TotalKills,
		Elem_GenocideRank,
		Elem_PlayerRank,
		Elem_WeaponName,
		Elem_WeaponRank,
		Elem_WeaponKills
	}

	enum WT_ScorecardPages
	{
		Page_Main,
		Page_Monsters
	}

	// --------------------------------------------------
	// MAIN
	// --------------------------------------------------

	private transient CVar BlackDisplay;
	private transient CVar LiteHudType;
	private transient CVar LiteHudOrientation;
	private transient CVar LiteHudOffsetX;
	private transient CVar LiteHudOffsetY;
	private transient CVar LiteHudColors[7];
	private transient CVar LiteHudAlpha;

	const DefcolMiscLabel = "WT_FadedBrown";
	const DefcolSelectedWeapon = "WT_OrangeRed";
	const DefcolTotalKills = "WT_Red";
	const DefcolGenocideRank = "WT_FadedRed";
	const DefcolPlayerRank = "WT_DarkGreen";
	const DefcolWeaponName = "WT_White";
	const DefcolWeaponRank = "WT_Gold";
	const DefcolWeaponKills = "WT_Red";
	const DefcolWeaponPreference = "WT_Grey";
	const DefcolMonsterInfo = "WT_FadedBlue";

	static const int XPReq[] = { 5000, 8500, 12500, 16000, 20000, 25000, 31000, 37000, 45000, 60000, 85000, 100000, 125000, 175000, 250000, 400000, 600000, 900000, 1150000, 1400000, 1900000, 2850000, 4000000, 5000000 };
	static const string XPRanks[] = { "Private 1st Class", "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "First Sergeant", "Sergeant Major", "Cmd. Sergeant Major", "Master Chief Sergeant", "2nd Lieutenant", "1st Lieutenant", "Captain", "Major", "Lieutenant Colonel", "Colonel", "Brigadier General", "Major General", "Lieutenant General", "General", "General of the Army", "Field Marshal", "Force Of Freedom", "Savior of Humanity" };
	const RankImagesPrefix = "RANK";

	static const int WeapKillReq[] = { 50, 100, 250, 400, 550, 700, 900, 1000, 1300, 1650, 2000, 2500, 3000, 4000, 5000, 6500, 8000, 10000, 12500, 15000, 20000, 25000 };
	static const string WeapRanks[] = { "Uninteresting", "Barely Threatening", "Slightly Scary", "Unfriendly", "Not Too Rough", "Plenty Hurtful", "Perfectly Ordinary", "Face-Gibbing", "Agitating", "Map-clearing", "Barbaric", "Megawad-purging", "Ultraviolent", "Absolutely Barbaric", "Nightmare-inducing", "Epic", "Legendary", "American", "id Select", "Hall's Custom", "Carmack's Prized", "Romero's Own" };

	static const int GenocideReqs[] = { 50, 100, 250, 500, 1000, 1500, 2500, 3500, 4500, 6000, 7500, 9000, 11111, 13333, 16666, 20000, 25000, 30000, 35000, 50000, 70000, 99999, 125000, 175000, 250000, 350000, 500000, 750000, 1000000 };
	static const string GenocideRanks[] = { "Innocent", "Craven", "Unbloodied", "Gun-shy", "Rank-and-file", "Basic Grunt", "Diablophobe", "Grave Digger", "Butcher", "Spree Killer", "Bounty Hunter", "Master Gunman", "Elite Warrior", "Mass Assassin", "Basically Mor'Ladim", "Ludicrous", "The Cleaner", "Psychopath", "Warlord", "Bloodthirsty", "Anti-Army Weapon", "Okuplok", "Unstoppable Force", "Carnage Elemental", "Grim Reaper", "Icon of Slay", "Death Incarnate", "Doomslayer", "Origin Exstinctum" };

	const WeaponListEntries = 11;
	const WeaponNameListMaxLength = 16;
	const WeaponNameMaxLength = 30; // [Ace] For the scorecard.
	const MonsterListEntries = 11;
	const MonsterListEntriesLong = 27;
	const MonsterNameMaxLength = 25;
	const MonsterNameMaxLengthLong = 25; // [Ace] Timmy Turner, my name is DougsDaleDimmaDaleDimmaDimmsDomeDoDiDomeDimmsDimmaDimmaDome, Owner of the DougDimmsDimmaDaleDimmsDomeDoDiDimmaDimmsDaleDimmaDimmsDaleDimmaDome.
	const KillsPerMedal = 3;
	const MedalsPerUpgrade = 3; // [Ace] This must be 2 or above!
	const MedalsPerLine = 11;
	const MedalTypesCount = 9;
	const LiteHudMaxStringWidth = 200; // [Ace] Size in pixels.
	const FontName = "STRPFNT";
	private transient ui Array<class<Weapon> > AvailableWeapons;
	private transient ui Array<class<Actor> > AvailableMonsters;
	private transient ui int WeaponListSelIndex;
	private transient ui int FolderListSelIndex;
	private transient ui int SelMonsterPage;
	private transient ui bool AutoSelected;
	private transient ui bool InSearchMode;
	private transient ui string SearchFilter;
	private transient bool DrawUi;
	private transient ui int SelectedPage;

	// [Ace] Misc crap.
	private transient ui HUDFont mMainFont;

	override void RenderOverlay(RenderEvent e)
	{
		mMainFont = HUDFont.Create(FontName);
		int LiteHUD = LiteHudType.GetInt();

		// ---------- LITE HUD ----------

		if (LiteHUD > 0 && !DrawUi && !AutomapActive && GameState == GS_LEVEL)
		{
			double Alpha = LiteHudAlpha.GetFloat();
			int GlobalOffsetX = 10 * LiteHudOffsetX.GetInt();
			int GlobalOffsetY = 10 * LiteHudOffsetY.GetInt();

			// [Ace] Check: Not "Weapons Stats".
			if (LiteHud != 2)
			{
				DrawLiteHudPlayerStats(StatusBar, 2 + GlobalOffsetX, 2 + GlobalOffsetY, Alpha);
			}

			// [Ace] Weapon Stats or All. Don't update available weapons if the weapon stats aren't visible. It'd be a waste of VM time.
			if (LiteHUD >= 2)
			{
				GetAvailableWeapons(AvailableWeapons);
				AutoSelectCurrentWeapon();
				class<Weapon> WeaponListSel = GetSelectedWeaponInList();

				if (WeaponListSel && WeaponListSel == ReadyWeapon)
				{
					int PosX = 2;
					int PosY = 2;

					// [Ace] Anything except "Weapon Stats"
					if (LiteHud != 2)
					{
						switch(LiteHudOrientation.GetInt())
						{
							case 0: PosY += 100; break;
							case 1: PosX += 120; break;
						}
					}

					DrawLiteHudWeaponStats(StatusBar, WeaponListSel, PosX + GlobalOffsetX, PosY + GlobalOffsetY, Alpha);
				}
			}
		}

		// ---------- SCORECARD ----------
		else if (DrawUi)
		{
			switch (SelectedPage)
			{
				case 0: DrawScorecardMain(StatusBar); break;
				case 1: DrawScorecardMonsters(StatusBar); break;
			}
		}
		else
		{
			AutoSelected = false;
		}
	}

	// --------------------------------------------------------------
	// LITE HUD - PLAYER
	// --------------------------------------------------------------

	private ui void DrawLiteHudPlayerStats(BaseStatusBar sbar, int x, int y, double alpha)
	{
		sbar.BeginHUD();

		int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_LEFT_TOP;
		int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		int TotalKills = GetTotalKillsForAllWeapons();

		// Total kills.
		sbar.DrawString(mMainFont, "Total:", (x, y), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_Labels)), alpha);
		sbar.DrawString(mMainFont, sbar.FormatNumber(TotalKills, 1, 10), (x + 45, y), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_TotalKills)), alpha);

		// Genocide rank.
		int GenocideRank; string GenocideRankString;
		[GenocideRank, GenocideRankString] = GetGenocideRank(TotalKills);
		sbar.DrawString(mMainFont, GenocideRankString, (x, y + 10), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_GenocideRank)), alpha);

		// Genocide medal.
		sbar.DrawImage("GRANK"..GenocideRank, (x + 44, y + 56), DI_TL, alpha);

		// Player rank & prestige.
		int PlayerRank; string PlayerRankString;
		[PlayerRank, PlayerRankString] = GetPlayerRank();
		if (Prestige > 0)
		{
			sbar.DrawImage("PRSTIGE"..Prestige, (x, y + 19), DI_TL, alpha);
		}
		sbar.DrawString(mMainFont, PlayerRankString, (Prestige > 0 ? x + 12 : x, y + 24), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_PlayerRank)), alpha);

		// Player experience.
		sbar.DrawString(mMainFont, "XP:", (x, y + 34), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_Labels)), alpha);
		sbar.DrawString(mMainFont, sbar.FormatNumber(Experience, 1, 7), (x + 22, y + 34), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_PlayerRank)), alpha);

		// Player experience for next level.
		string NextPlayerRankExp = PlayerRank < XPReq.Size() ? sbar.FormatNumber(XPReq[PlayerRank], 1, 7) : "-";
		sbar.DrawString(mMainFont, "NX:", (x, y + 44), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_Labels)), alpha);
		sbar.DrawString(mMainFont, NextPlayerRankExp, (x + 22, y + 44), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_PlayerRank)), alpha);

		// Player medal.
		sbar.DrawImage("RANK"..(PlayerRank + 1), (x + 2, y + 56), DI_TL, alpha);
	}

	// --------------------------------------------------------------
	// LITE HUD - WEAPON
	// --------------------------------------------------------------

	private ui void DrawLiteHudWeaponStats(BaseStatusBar sbar, class<Weapon> wpn, int x, int y, double alpha)
	{
		sbar.BeginHUD();

		int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_LEFT_TOP;
		int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		bool UseFolderView = LiteFolderView.GetBool();
		int WeaponKills = wpn ? GetKillsForWeapon(GetDefaultByType(wpn).GetClassName(), UseFolderView) : 0;

		// Weapon name.
		Font fnt = FontName;
		BrokenLines MultilineName = fnt.BreakLines(GetWeaponName(wpn, UseFolderView), LiteHudMaxStringWidth);
		for (int i = 0; i < MultilineName.Count(); ++i)
		{
			y += 10 * i;
			sbar.DrawString(mMainFont, MultilineName.StringAt(i), (x, y), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_WeaponName)), alpha);
		}
		
		// Weapon rank.
		int WeaponRank; string WeaponRankString;
		[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
		sbar.DrawString(mMainFont, WeaponRankString, (x, y + 12), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_WeaponRank)), alpha);
		sbar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (x, y + 22), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_WeaponRank)), alpha);

		// Weapon kills.
		sbar.DrawString(mMainFont, "K:", (x, y + 36), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_Labels)), alpha);
		sbar.DrawString(mMainFont, sbar.FormatNumber(WeaponKills, 1, 6), (x + 14, y + 36), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_WeaponKills)), alpha);

		// Weapon kills for next level.
		string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? sbar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
		sbar.DrawString(mMainFont, "NX:", (x, y + 46), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_Labels)), alpha);
		sbar.DrawString(mMainFont, NextWeaponRankKills, (x + 24, y + 46), DI_TL_TEXT_LEFT, Font.FindFontColor(GetColorForElement(Elem_WeaponRank)), alpha);

		// Weapon medals.
		DrawWeaponMedals(WeaponKills, x, y + 60, DI_TL, alpha);
	}

	// --------------------------------------------------------------
	// SCORECARD - MAIN
	// --------------------------------------------------------------

	private ui void DrawScorecardMain(BaseStatusBar sbar)
	{
		sbar.BeginHUD();

		int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// --------------- MISCELLANEOUS ---------------

		if (!InSearchMode) GetAvailableWeapons(AvailableWeapons);

		// [Ace] Autoselect in the list your currently selected weapon in the world.
		if (!AutoSelected)
		{
			AutoSelectCurrentWeapon();
			AutoSelected = true;
		}

		// --------------- SHARED ---------------

		class<Weapon> WeaponListSel = GetSelectedWeaponInList();

		// --------------- GRAPHIC ---------------
		
		sbar.DrawImage(BlackDisplay.GetBool() ? "WTSTATPB" : "WTSTATPN", (0, 0.5), DI_CENTER); // [Ace] 0.5 because nearest neighbour scaling is not your friend.

		// --------------- MAIN STATS ---------------

		int WeaponKills = WeaponListSel ? GetKillsForWeapon(GetDefaultByType(WeaponListSel).GetClassName(), false) : 0;
		int TotalKills = GetTotalKillsForAllWeapons();

		// Total kills.
		sbar.DrawString(mMainFont, sbar.FormatNumber(TotalKills, 1, 10), (-42, -84), DI_TEXT_RIGHT, Font.FindFontColor(DefcolTotalKills));

		// Genocide rank.
		int GenocideRank; string GenocideRankString;
		[GenocideRank, GenocideRankString] = GetGenocideRank(TotalKills);
		sbar.DrawString(mMainFont, GenocideRankString, (-223, -60), DI_TEXT_LEFT, Font.FindFontColor(DefcolGenocideRank));

		// Genocide medal.
		sbar.DrawImage("GRANK"..GenocideRank, (-206, 77), DI_CENTER);

		// Player rank.
		int PlayerRank; string PlayerRankString;
		[PlayerRank, PlayerRankString] = GetPlayerRank();
		sbar.DrawString(mMainFont, PlayerRankString, (-223, -36), DI_TEXT_LEFT, Font.FindFontColor(DefcolPlayerRank));

		// Player prestige.
		sbar.DrawImage("PRSTIGE"..Prestige, (-45, -32.5), DI_CENTER);

		// Player experience.
		sbar.DrawString(mMainFont, sbar.FormatNumber(Experience, 1, 7), (-139, -12), DI_TEXT_RIGHT, Font.FindFontColor(DefcolPlayerRank));

		// Player experience for next level.
		string NextPlayerRankExp = PlayerRank < XPReq.Size() ? sbar.FormatNumber(XPReq[PlayerRank], 1, 7) : "-";
		sbar.DrawString(mMainFont, NextPlayerRankExp, (-42, -12), DI_TEXT_RIGHT, Font.FindFontColor(DefcolPlayerRank));

		// Player medal.
		sbar.DrawImage("RANK"..(PlayerRank + 1), (-206, 28), DI_CENTER);

		// --------------- WEAPON LIST ---------------

		int WeaponPagesTotal = max(1, int(ceil(AvailableWeapons.Size() / double(WeaponListEntries))));
		int WeaponPage = WeaponListSelIndex / WeaponListEntries;

		string Title = InSearchMode ? SearchFilter.."_" : (SearchFilter != "" ? SearchFilter : "All Weapons");
		sbar.DrawString(mMainFont, Title, (-174, 12), DI_TEXT_LEFT, Font.FindFontColor(DefcolMiscLabel));
		sbar.DrawString(mMainFont, (WeaponPage + 1).."/"..WeaponPagesTotal, (-42, 12), DI_TEXT_RIGHT, Font.FindFontColor(DefcolMiscLabel));

		for (int i = 0; WeaponListEntries * WeaponPage + i < AvailableWeapons.Size() && i < WeaponListEntries; ++i)
		{
			let CurrWeapon = GetDefaultByType(AvailableWeapons[WeaponListEntries * WeaponPage + i]);
			
			sbar.DrawString(mMainFont, GetTruncatedText(CurrWeapon.GetTag(), WeaponNameListMaxLength), (-174, 36 + 9 * i), DI_TEXT_LEFT, WeaponListSel == CurrWeapon.GetClass() ? Font.FindFontColor(DefcolSelectedWeapon) : Font.FindFontColor(DefcolMiscLabel));
		}

		// --------------- WEAPON STATS ---------------

		if (WeaponListSel)
		{
			// Weapon name.
			sbar.DrawString(mMainFont, GetTruncatedText(GetDefaultByType(WeaponListSel).GetTag(), WeaponNameMaxLength), (-7, -132), DI_TEXT_LEFT, Font.FindFontColor(DefcolWeaponName));

			// Weapon rank.
			int WeaponRank; string WeaponRankString;
			[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
			sbar.DrawString(mMainFont, WeaponRankString, (-7, -108), DI_TEXT_LEFT, Font.FindFontColor(DefcolWeaponRank));
			sbar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (223, -108), DI_TEXT_RIGHT, Font.FindFontColor(DefcolWeaponRank));

			// Weapon kills.
			sbar.DrawString(mMainFont, sbar.FormatNumber(WeaponKills, 1, 6), (66, -84), DI_TEXT_RIGHT, Font.FindFontColor(DefcolWeaponKills));

			// Weapon kills for next level.
			string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? sbar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
			sbar.DrawString(mMainFont, NextWeaponRankKills, (152, -84), DI_TEXT_RIGHT, Font.FindFontColor(DefcolWeaponRank));

			// Weapon preference.
			sbar.DrawString(mMainFont, int(WeaponKills / double(TotalKills) * 100).."%", (223, -84), DI_TEXT_RIGHT, Font.FindFontColor(DefcolWeaponPreference));

			// Weapon icon.
			string SpriteToDraw = "";
			string Icon = TexMan.GetName(GetDefaultByType(WeaponListSel).Icon);
			if (Icon == "ALTHUDCF")
			{
				// [Ace] Loops either until NextState is null or until it starts back from the beginning.
				State SpawnState = GetDefaultByType(WeaponListSel).SpawnState;
				State CurrState = SpawnState;
				do
				{
					string SpriteName = TexMan.GetName(CurrState.GetSpriteTexture(0));
					if (SpriteName  != "TNT1A0")
					{
						SpriteToDraw = SpriteName;
						break;
					}
					CurrState = CurrState.NextState;
				} while (CurrState != null && SpawnState != CurrState)
			}
			else
			{
				SpriteToDraw = Icon;
			}

			// [Ace] Scale down sprites if they're too large to fit in the display.
			TextureID Img = TexMan.CheckForTexture(SpriteToDraw, TexMan.Type_Any);
			vector2 ImgSize;
			[ImgSize.x, ImgSize.y] = TexMan.GetSize(Img);
			vector2 Box = (ImgSize.X > 90 ? 90 : -1, ImgSize.Y > 56 ? 56 : -1);
			sbar.DrawImage(SpriteToDraw, (40, -33), DI_CENTER, 1.0, Box);

			// Weapon medals.
			DrawWeaponMedals(WeaponKills, 108, -53, DI_CENTER, 1.0);

			// --------------- MONSTER LIST & STATS ---------------

			// [Ace] Filter the monsters and get all the necessary data for the selected weapon.
			GetMonstersForWeapon(WeaponListSel.GetClassName(), AvailableMonsters);

			// [Ace] Then display them.
			sbar.DrawString(mMainFont, (SelMonsterPage + 1).."/"..GetMonsterPages(MonsterListEntries), (160, 12), DI_TEXT_RIGHT, Font.FindFontColor(DefcolMonsterInfo));

			int StartIndex = MonsterListEntries * SelMonsterPage;
			int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
			for (int i = StartIndex; i < AvailableMonsters.Size() && mRow < MonsterListEntries; ++i)
			{
				let Monster = GetDefaultByType(AvailableMonsters[i]);

				// Name.
				sbar.DrawString(mMainFont, GetTruncatedText(Monster.GetTag(), MonsterNameMaxLength), (-7, 36 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor(DefcolMonsterInfo));

				// Kills.
				int Kills = GetKillsForMonster(WeaponListSel.GetClassName(), Monster.GetClassName());
				sbar.DrawString(mMainFont, sbar.FormatNumber(Kills, 1, 5), (224, 36 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor(DefcolMonsterInfo));
				
				mRow++;
			}
		}
	}

	// --------------------------------------------------------------
	// SCORECARD - MONSTERS
	// --------------------------------------------------------------

	private ui void DrawScorecardMonsters(BaseStatusBar sbar)
	{
		sbar.BeginHUD();

		int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
		int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
		int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
		int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

		// --------------- MISCELLANEOUS ---------------

		GetAvailableWeapons(AvailableWeapons);

		// --------------- GRAPHIC ---------------
		
		sbar.DrawImage(BlackDisplay.GetBool() ? "WTSTATMB" : "WTSTATMN", (0, 0.5), DI_CENTER);

		// --------------- MONSTER LIST & STATS ---------------

		// [Ace] Filter the monsters and get all of them for all filtered weapons.
		GetAllMonsters(AvailableWeapons, AvailableMonsters);

		// [Ace] Then display them.
		sbar.DrawString(mMainFont, (SelMonsterPage + 1).."/"..GetMonsterPages(MonsterListEntriesLong), (70, -132), DI_TEXT_RIGHT, Font.FindFontColor(DefcolMonsterInfo));

		int StartIndex = MonsterListEntriesLong * SelMonsterPage;
		int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
		for (int i = StartIndex; i < AvailableMonsters.Size() && mRow < MonsterListEntriesLong; ++i)
		{
			let Monster = GetDefaultByType(AvailableMonsters[i]);

			// Name.
			sbar.DrawString(mMainFont, GetTruncatedText(Monster.GetTag(), MonsterNameMaxLengthLong), (-133, -107 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor(DefcolMonsterInfo));

			// Kills.
			sbar.DrawString(mMainFont, sbar.FormatNumber(GetTotalKillsForMonster(AvailableWeapons, Monster.GetClassName()), 1, 5), (134, -107 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor(DefcolMonsterInfo));

			mRow++;
		}
	}


	// --------------------------------------------------
	// SHARED
	// --------------------------------------------------

	private ui void AutoSelectCurrentWeapon()
	{
		for (int i = 0; i < AvailableWeapons.Size(); ++i)
		{
			if (AvailableWeapons[i] == ReadyWeapon)
			{
				WeaponListSelIndex = i;
				break;
			}
		}
	}

	// [Ace] If the list suddenly goes blank, reset the index to 0. It also prevents out-of-index exceptions if you've selected the last weapon in the list and apply a filter which will reduce the total count.
	private ui class<Weapon> GetSelectedWeaponInList()
	{
		if (AvailableWeapons.Size() > 0)
		{
			if (WeaponListSelIndex >= AvailableWeapons.Size())
			{
				WeaponListSelIndex = AvailableWeapons.Size() - 1;
			}
			return AvailableWeapons[WeaponListSelIndex];
		}

		WeaponListSelIndex = 0;
		return null;
	}

	private ui void DrawWeaponMedals(int kills, int x, int y, int flags, double alpha)
	{
		int MedalCount[MedalTypesCount]; // [Ace] Each integer denotes how many medals of a given type there should be, starting at the highest type.
		int TotalNumberOfMedals = kills / KillsPerMedal; // [Ace] More precisely, total number of tier 1 medals.
		for (int i = MedalTypesCount; i > 0; --i)
		{
			// [Ace] I'm not going to remember how this works a week from now.
			int MedalsForThisType = TotalNumberOfMedals / int(MedalsPerUpgrade ** (i - 1));
			TotalNumberOfMedals -= MedalsForThisType * int(MedalsPerUpgrade ** (i - 1));

			MedalCount[MedalTypesCount - i] = MedalsForThisType;
		}

		int MedalsShown = 0;
		for (int i = 0; i < MedalTypesCount; ++i)
		{
			MedalsShown += MedalCount[i];
			for (int j = 0; j < MedalCount[i]; ++j)
			{
				// [Ace] I'm definitely not going to remember how this works. I hate maths.
				int XOffset = (j + (MedalsShown - MedalCount[i]));
				int TotalXOffset = 11 * (XOffset % (MedalsPerLine));
				int WStatsOffsetY = 15 * (XOffset / MedalsPerLine);
				StatusBar.DrawImage("WMEDAL"..(MedalTypesCount - i), (x + TotalXOffset, y + WStatsOffsetY), flags, alpha);
			}
		}
	}

	private ui void GetAvailableWeapons(out Array<class<Weapon> > arr)
	{
		arr.Clear();
		int WFilter = IWADWeaponFilter.GetInt();
		
		let it = DictionaryIterator.Create(WeaponStats);
		while (it.Next())
		{
			class<Weapon> wpn;
			wpn = it.Key();
			if (wpn)
			{
				int IwadType = GetIwadType(Search_Weapons, wpn);
				if ((WFilter == Filter_All || WFilter == IWadType || IwadType == Filter_None) && !InSearchMode && (SearchFilter == "" || GetDefaultByType(wpn).GetTag().MakeLower().IndexOf(SearchFilter.MakeLower()) != -1))
				{
					arr.Push(wpn);
				}
			}
		}

		// [Ace] Sort it.
		for (int i = 0; i < arr.Size() - 1; ++i)
		{
			for (int j = i + 1; j < arr.Size(); ++j)
			{
				let CurrWeapon = GetDefaultByType(arr[i]);
				let NextWeapon = GetDefaultByType(arr[j]);

				// [Ace] Sort by numbers first, then by first letter if the numbers match.
				if (CurrWeapon.SlotNumber >= NextWeapon.SlotNumber || (CurrWeapon.SlotNumber == NextWeapon.SlotNumber && String.Format("%s", CurrWeapon.GetClassName()).ByteAt(0) >= String.Format("%s", NextWeapon.GetClassName()).ByteAt(0)))
				{
					let Swap = arr[i];
					arr[i] = arr[j];
					arr[j] = Swap;
				}
			}
		}
	}

	private ui void GetMonstersForWeapon(string weapon, out Array<class<Actor> > arr)
	{
		arr.Clear();
		int MFilter = IWADMonsterFilter.GetInt();

		let it = DictionaryIterator.Create(Dictionary.FromString(WeaponStats.At(weapon)));
		while (it.Next())
		{
			class<Actor> mon;
			mon = it.Key();
			if (mon)
			{
				int IwadType = GetIwadType(Search_Monsters, mon);
				if (MFilter == Filter_All || MFilter == IWadType || IwadType == Filter_None)
				{
					arr.Push(mon);
				}
			}
		}

		SortMonsterArray(arr);
	}

	private ui void GetAllMonsters(Array<class<Weapon> > wArr, out Array<class<Actor> > mArr)
	{
		mArr.Clear();
		int MFilter = IWADMonsterFilter.GetInt();

		for (int i = 0; i < wArr.Size(); ++i)
		{
			let it = DictionaryIterator.Create(Dictionary.FromString(WeaponStats.At(wArr[i].GetClassName())));
			while (it.Next())
			{
				class<Actor> mon;
				mon = it.Key();
				if (mon && mArr.Find(mon) == mArr.Size())
				{
					int IwadType = GetIwadType(Search_Monsters, mon);
					if (MFilter == Filter_All || MFilter == IWadType || IwadType == Filter_None)
					{
						mArr.Push(mon);
					}
				}
			}
		}

		SortMonsterArray(mArr);
	}

	private ui void SortMonsterArray(out Array<class<Actor> > mArr)
	{
		// [Ace] Yes. Bubble sort again.
		for (int i = 0; i < mArr.Size() - 1; ++i)
		{
			for (int j = i + 1; j < mArr.Size(); ++j)
			{
				let CurrMonster = GetDefaultByType(mArr[i]);
				let NextMonster = GetDefaultByType(mArr[j]);
				if (CurrMonster.Health >= NextMonster.Health)
				{
					let Swap = mArr[i];
					mArr[i] = mArr[j];
					mArr[j] = Swap;
				}
			}
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private ui int, string GetGenocideRank(int kills) const
	{
		int GenRank = 0;
		string GenRankString = "Pacifist";
		for (int i = 0; i < GenocideReqs.Size(); ++i)
		{
			if (kills >= GenocideReqs[i])
			{
				GenRank = i + 1;
				GenRankString = GenocideRanks[i];
			}
		}

		return GenRank, GenRankString;
	}

	private ui int, string GetPlayerRank() const
	{
		int PlayerRank = 0;
		string PlayerRankString = "Private";
		for (int i = 0; i < XPReq.Size(); ++i)
		{
			if (Experience >= XPReq[i])
			{
				PlayerRank = i + 1;
				PlayerRankString = XPRanks[i];
			}
		}

		return PlayerRank, PlayerRankString;
	}

	private ui string GetWeaponName(class<Weapon> wpn, bool useFolder)
	{
		string WpnName = wpn.GetClassName();
		string WeaponFolder = FolderBindings.At(WpnName.MakeLower());
		return useFolder && WeaponFolder != "" ? WeaponFolder : GetDefaultByType(wpn).GetTag();
	}

	private ui int, string GetWeaponRank(int kills) const
	{
		int WeaponRank = 0;
		string WeaponRankString = "Strange";
		for (int i = 0; i < WeapKillReq.Size(); ++i)
		{
			if (kills >= WeapKillReq[i])
			{
				WeaponRank = i + 1;
				WeaponRankString = WeapRanks[i];
			}
		}

		return WeaponRank, WeaponRankString;
	}

	private ui int GetKillsForWeapon(string weapon, bool useFolder) const
	{
		int TotalKills = 0;

		// [Ace] The folder the weapon belongs to.
		string WeaponFolder = FolderBindings.At(weapon.MakeLower());
		if (useFolder && WeaponFolder != "")
		{
			Array<class<Weapon> > WeaponsInFolder;
			GetWeaponsInFolder(WeaponFolder, WeaponsInFolder);

			for (int i = 0; i < WeaponsInFolder.Size(); ++i)
			{
				TotalKills += GetKillsForWeapon(WeaponsInFolder[i].GetClassName(), false);
			}
		}
		else
		{
			string Kills = WeaponStats.At(weapon);
			if (Kills != "")
			{
				let it = DictionaryIterator.Create(Dictionary.FromString(Kills)); 
				while(it.Next())
				{
					TotalKills += int(it.Value().ToDouble());
				}
			}
		}

		return TotalKills;
	}

	private ui int GetTotalKillsForAllWeapons() const
	{
		int TotalKills = 0;
		let it = DictionaryIterator.Create(WeaponStats);
		{
			while (it.Next())
			{
				TotalKills += GetKillsForWeapon(it.Key(), false);
			}
		}
		return TotalKills;
	}

	private ui int GetKillsForMonster(string weapon, string monster) const
	{
		let Monsters = Dictionary.FromString(WeaponStats.At(weapon));
		return int(Monsters.At(monster).ToDouble());
	}

	private ui int GetTotalKillsForMonster(Array<class<Weapon> > wArr, string monster) const
	{
		int TotalKills = 0;

		for (int i = 0; i < wArr.Size(); ++i)
		{
			Dictionary MonstersForWeapon = Dictionary.FromString(WeaponStats.At(wArr[i].GetClassName()));
			TotalKills += int(MonstersForWeapon.At(monster).ToDouble());
		}

		return TotalKills;
	}

	private ui int GetMonsterPages(int maxEntries) const
	{
		return max(1, int(ceil(AvailableMonsters.Size() / double(maxEntries))));
	}

	private ui string GetColorForElement(WT_HudElementType element)
	{
		int CvarValue = LiteHudColors[element].GetInt();
		if (CvarValue == 0)
		{
			switch(element)
			{
				case Elem_Labels: return DefcolMiscLabel;
				case Elem_TotalKills: return DefcolTotalKills;
				case Elem_GenocideRank: return DefcolGenocideRank;
				case Elem_PlayerRank: return DefcolPlayerRank;
				case Elem_WeaponName: return DefcolWeaponName;
				case Elem_WeaponRank: return DefcolWeaponRank;
				case Elem_WeaponKills: return DefcolWeaponKills;
			}
		}

		return StringTable.Localize("$HUD_COLOR_"..CvarValue); // [Ace] Should show up as black.
	}

	private ui string GetTruncatedText(string text, int length)
	{
		if (text.Length() > length)
		{
			string TruncatedName = text.Mid(0, length);
			if (TruncatedName.ByteAt(TruncatedName.Length() - 1) == 32)
			{
				TruncatedName.DeleteLastCharacter();
			}
			text = TruncatedName.."...";
		}

		return text;
	}

	// --------------------------------------------------
	// INPUT
	// --------------------------------------------------

	override bool UiProcess(UiEvent e)
	{
		if (e.Type == UiEvent.Type_KeyDown && DrawUi)
		{
			if (!InSearchMode)
			{
				switch (e.KeyChar)
				{
					// [Ace] Cycle pages left.
					case UiEvent.Key_Left:
						--SelectedPage %= Page_Monsters + 1;
						SelectedPage = abs(SelectedPage);
						SelMonsterPage = 0;
						break;

					// [Ace] Cycle pages right.
					case UiEvent.Key_Right:
						++SelectedPage %= Page_Monsters + 1;
						SelMonsterPage = 0;
						break;

					// [Ace] Move weapon selection up.
					case UiEvent.Key_Up:
						if (SelectedPage != Page_Main) break;
						WeaponListSelIndex = max(0, WeaponListSelIndex - 1);
						SelMonsterPage = 0;
						break;

					// [Ace] Move weapon selection down.
					case UiEvent.Key_Down:
						if (SelectedPage != Page_Main) break;
						WeaponListSelIndex = min(WeaponListSelIndex + 1, AvailableWeapons.Size() - 1);
						SelMonsterPage = 0;
						break;

					// [Ace] Previous monster page.
					case UiEvent.Key_PgUp:
						SelMonsterPage = max(0, SelMonsterPage - 1);
						break;

					// [Ace] Next monster page. No cap on this because it'd be a pain to get how many monster pages the current weapon has.
					case UiEvent.Key_PgDn:
						SelMonsterPage = min(SelMonsterPage + 1, GetMonsterPages(SelectedPage == Page_Monsters ? MonsterListEntriesLong : MonsterListEntries) - 1);
						break;

					// [Ace] Exit menu.
					case UiEvent.Key_Escape:
						SearchFilter = "";
						SendNetworkEvent("WT_ToggleUi");
						break;

					// [Ace] Enter search mode. Chars: Space
					case 32:
						if (SelectedPage != Page_Main) break;
						SearchFilter = "";
						InSearchMode = true;
						break;

					// [Ace] Clear filter.
					case UiEvent.Key_Backspace:
						SearchFilter = "";
						break;

					// [Ace] Upgrade prestige. Chars: 'p' or 'P'.
					// It really bothers me that I'm doing such logic checks in the UI. I'd have to completely mess up the scoping otherwise.
					case 80:
					case 112:
						if (GetPlayerRank() == XPRanks.Size() && Prestige < 3)
						{
							SendNetworkEvent("WT_UpgradePrestige");
						}
						break;

					// [Ace] Take screenshot.
					case UiEvent.Key_F12:
						LevelLocals.MakeScreenShot();
						break;
				}
			}
			else
			{
				switch (e.KeyChar)
				{
					// [Ace] Apply filter.
					case UiEvent.Key_Return:
						InSearchMode = false;
						break;

					// [Ace] Exit search mode and don't apply filter.
					case UiEvent.Key_Escape:
						SearchFilter = "";
						InSearchMode = false;
						break;

					// [Ace] Delete last character.
					case UiEvent.Key_Backspace:
						SearchFilter.DeleteLastCharacter();
						break;

					default:
						if (SearchFilter.Length() < 13)
						{
							SearchFilter = SearchFilter..e.KeyString;
						}
						break;
				}
			}
		}

		return false;
	}
}