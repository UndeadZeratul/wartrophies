extend class WT_MainHandler
{
	// --------------------------------------------------
	// MAIN
	// --------------------------------------------------

	static const int XPReq[] = { 5000, 8500, 12500, 16000, 20000, 25000, 31000, 37000, 45000, 60000, 85000, 100000, 125000, 175000, 250000, 400000, 600000, 900000, 1150000, 1400000, 1900000, 2850000, 4000000, 5000000 };
	static const string XPRanks[] = { "Private 1st Class", "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "First Sergeant", "Sergeant Major", "Cmd. Sergeant Major", "Master Chief Sergeant", "2nd Lieutenant", "1st Lieutenant", "Captain", "Major", "Lieutenant Colonel", "Colonel", "Brigadier General", "Major General", "Lieutenant General", "General", "General of the Army", "Field Marshal", "Force Of Freedom", "Savior of Humanity" };
	const RankImagesPrefix = "RANK";

	static const int WeapKillReq[] = { 50, 100, 250, 400, 550, 700, 900, 1000, 1300, 1650, 2000, 2500, 3000, 4000, 5000, 6500, 8000, 10000, 12500, 15000, 20000, 25000 };
	static const string WeapRanks[] = { "Uninteresting", "Barely Threatening", "Slightly Scary", "Unfriendly", "Not Too Rough", "Plenty Hurtful", "Perfectly Ordinary", "Face-Gibbing", "Agitating", "Map-clearing", "Barbaric", "Megawad-purging", "Ultraviolent", "Absolutely Barbaric", "Nightmare-inducing", "Epic", "Legendary", "American", "id Select", "Hall's Custom", "Carmack's Prized", "Romero's Own" };

	static const int GenocideReqs[] = { 50, 100, 250, 500, 1000, 1500, 2500, 3500, 4500, 6000, 7500, 9000, 11111, 13333, 16666, 20000, 25000, 30000, 35000, 50000, 70000, 99999, 125000, 175000, 250000, 350000, 500000, 750000, 100000 };
	static const string GenocideRanks[] = { "Innocent", "Craven", "Unbloodied", "Gun-shy", "Rank-and-file", "Basic Grunt", "Diablophobe", "Grave Digger", "Butcher", "Spree Killer", "Bounty Hunter", "Master Gunman", "Elite Warrior", "Mass Assassin", "Basically Mor'Ladim", "Ludicrous", "The Cleaner", "Psychopath", "Warlord", "Bloodthirsty", "Anti-Army Weapon", "Okuplok", "Unstoppable Force", "Carnage Elemental", "Grim Reaper", "Icon of Slay", "Death Incarnate", "Doomslayer", "Origin Exstinctum" };

	const WeaponListEntries = 11;
	const WeaponListMaxStringWidth = 16;
	const MonsterListEntries = 11;
	const MonsterListMaxStringWidth = 15;
	const KillsPerMedal = 3;
	const MedalsPerUpgrade = 3; // [Ace] This must be 2 or above!
	const MedalsPerLine = 11;
	const MedalTypesCount = 9;
	private transient ui Array<class<Weapon> > AvailableWeapons;
	private transient ui Array<class<Actor> > AvailableMonsters;
	private transient ui int WeaponListSelIndex;
	private transient ui int SelMonsterPage;
	private transient ui bool AutoSelected;
	private transient ui bool InSearchMode;
	private transient ui string SearchFilter;
	private transient bool DrawUi;

	private transient ui HUDFont mMainFont;

	override void RenderOverlay(RenderEvent e)
	{
		int LiteHUD = LiteHUDType.GetInt();
		mMainFont = HUDFont.Create("STRPFNT");

		// ------------------------------------------------
		// LITE HUD
		// ------------------------------------------------

		if (LiteHUD > 0 && !DrawUi && !AutomapActive)
		{
			int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_LEFT_TOP;
			int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			int DI_TR = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_ITEM_RIGHT_TOP;
			int DI_TR_TEXT_LEFT = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TR_TEXT_CENTER = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TR_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			// [Ace] Mmmm, code injections!
			StatusBar.BeginHUD();

			// --------------- MISCELLANEOUS ---------------

			GetAvailableWeapons();
			AutoSelectCurrentWeapon();

			// --------------- SHARED ---------------

			class<Weapon> WeaponListSel = GetSelectedWeaponInList();
			int WeaponKills = WeaponListSel ? GetKillsForWeapon(GetDefaultByType(WeaponListSel).GetClassName()) : 0;
			int TotalKills = GetTotalKillsForAllWeapons();

			// --------------- MAIN STATS ---------------

			if (LiteHUD == 1 || LiteHUD == 3)
			{
				// Total kills.
				StatusBar.DrawString(mMainFont, "Total:", (2, 2), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(TotalKills, 1, 10), (47, 2), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponKills"));

				// Genocide rank.
				StatusBar.DrawString(mMainFont, GetGenocideRank(TotalKills), (2, 12), DI_TL_TEXT_LEFT, Font.FindFontColor("GenocideRank"));

				// Player rank & prestige.
				int PlayerRank; string PlayerRankString;
				[PlayerRank, PlayerRankString] = GetPlayerRank();
				if (Prestige > 0)
				{
					StatusBar.DrawImage("PRSTIGE"..Prestige, (2, 21), DI_TL);
				}
				StatusBar.DrawString(mMainFont, PlayerRankString, (Prestige > 0 ? 14 : 2, 26), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player experience.
				StatusBar.DrawString(mMainFont, "XP:", (2, 36), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Experience, 1, 7), (24, 36), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player experience for next level.
				string NextPlayerRankExp = PlayerRank < XPReq.Size() ? StatusBar.FormatNumber(XPReq[PlayerRank], 1, 7) : "-";
				StatusBar.DrawString(mMainFont, "NX:", (2, 46), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, NextPlayerRankExp, (24, 46), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player medal.
				StatusBar.DrawImage("RANK"..PlayerRank, (4, 58), DI_TL);
			}

			// --------------- WEAPON STATS ---------------

			// [Ace] If the stats above aren't visible, shift the entire thing up.
			int YOffset = LiteHUD == 2 ? -98 : 0;
			if (LiteHUD > 1 && WeaponListSel && WeaponListSel == ReadyWeapon)
			{
				// Weapon name.
				StatusBar.DrawString(mMainFont, GetDefaultByType(WeaponListSel).GetTag(), (2, 100 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponName"));

				// Weapon rank.
				int WeaponRank; string WeaponRankString;
				[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
				StatusBar.DrawString(mMainFont, WeaponRankString, (2, 114 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));
				StatusBar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (2, 124 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));

				// Weapon kills.
				StatusBar.DrawString(mMainFont, "K:", (2, 138 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(WeaponKills, 1, 6), (16, 138 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponKills"));

				// Weapon kills for next level.
				string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? StatusBar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
				StatusBar.DrawString(mMainFont, "NX:", (2, 148 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, NextWeaponRankKills, (26, 148 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));

				// Weapon medals.
				DrawWeaponMedals(WeaponKills, 2, 162 + YOffset, DI_TL);
			}
		}

		// ------------------------------------------------
		// SCORECARD
		// ------------------------------------------------

		else if (DrawUi)
		{
			StatusBar.BeginHUD();

			int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
			int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			// --------------- MISCELLANEOUS ---------------

			if (!InSearchMode) GetAvailableWeapons();

			// [Ace] Autoselect in the list your currently selected weapon in the world.
			if (!AutoSelected)
			{
				AutoSelectCurrentWeapon();
				AutoSelected = true;
			}

			// --------------- SHARED ---------------

			class<Weapon> WeaponListSel = GetSelectedWeaponInList();

			// --------------- GRAPHIC ---------------
			
			StatusBar.DrawString(mMainFont, "Press 'ESC' to exit", (-232, -160), DI_TEXT_LEFT, Font.CR_GREEN);
			StatusBar.DrawString(mMainFont, "Press 'Space' to search. 'Enter' to apply. 'Backspace' to clear.", (-232, -150), DI_TEXT_LEFT, Font.CR_GREEN);
			StatusBar.DrawImage(BlackDisplay.GetBool() ? "WTSTATPB" : "WTSTATPN", (0, 0.5), DI_CENTER); // [Ace] 0.5 because nearest neighbour scaling is not your friend.

			// --------------- MAIN STATS ---------------

			int WeaponKills = WeaponListSel ? GetKillsForWeapon(GetDefaultByType(WeaponListSel).GetClassName()) : 0;
			int TotalKills = GetTotalKillsForAllWeapons();

			// Total kills.
			StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(TotalKills, 1, 10), (-42, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponKills"));

			// Genocide rank.
			StatusBar.DrawString(mMainFont, GetGenocideRank(TotalKills), (-223, -60), DI_TEXT_LEFT, Font.FindFontColor("GenocideRank"));

			// Player rank.
			int PlayerRank; string PlayerRankString;
			[PlayerRank, PlayerRankString] = GetPlayerRank();
			StatusBar.DrawString(mMainFont, PlayerRankString, (-223, -36), DI_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

			// Player prestige.
			StatusBar.DrawImage("PRSTIGE"..Prestige, (-45, -32.5), DI_CENTER);

			// Player experience.
			StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Experience, 1, 7), (-139, -12), DI_TEXT_RIGHT, Font.FindFontColor("PlayerRank"));

			// Player experience for next level.
			string NextPlayerRankExp = PlayerRank < XPReq.Size() ? StatusBar.FormatNumber(XPReq[PlayerRank], 1, 7) : "-";
			StatusBar.DrawString(mMainFont, NextPlayerRankExp, (-42, -12), DI_TEXT_RIGHT, Font.FindFontColor("PlayerRank"));

			// Player medal.
			StatusBar.DrawImage("RANK"..PlayerRank, (-206, 28), DI_CENTER);

			// --------------- WEAPON LIST ---------------

			int WeaponPagesTotal = AvailableWeapons.Size() / (WeaponListEntries + 1) + 1;
			int WeaponPage = WeaponListSelIndex / WeaponListEntries;

			string Title = InSearchMode ? SearchFilter.."_" : (SearchFilter != "" ? SearchFilter : "All Weapons");
			StatusBar.DrawString(mMainFont, Title, (-174, 12), DI_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
			StatusBar.DrawString(mMainFont, (WeaponPage + 1).."/"..WeaponPagesTotal, (-42, 12), DI_TEXT_RIGHT, Font.FindFontColor("MiscLabels"));

			for (int i = 0; WeaponListEntries * WeaponPage + i < AvailableWeapons.Size() && i < WeaponListEntries; ++i)
			{
				let CurrWeapon = GetDefaultByType(AvailableWeapons[WeaponListEntries * WeaponPage + i]);
				
				// [Ace] Truncate name if it's too long.
				string WeaponName = CurrWeapon.GetTag();
				if (WeaponName.Length() > WeaponListMaxStringWidth)
				{
					WeaponName = WeaponName.Mid(0, WeaponListMaxStringWidth).."...";
				}
				StatusBar.DrawString(mMainFont, WeaponName, (-174, 36 + 9 * i), DI_TEXT_LEFT, WeaponListSel == CurrWeapon.GetClass() ? Font.FindFontColor("SelectedWeapon") : Font.FindFontColor("MiscLabels"));
			}

			// --------------- WEAPON STATS ---------------

			if (WeaponListSel)
			{
				// Weapon name.
				StatusBar.DrawString(mMainFont, GetDefaultByType(WeaponListSel).GetTag(), (-7, -132), DI_TEXT_LEFT, Font.FindFontColor("WeaponName"));

				// Weapon rank.
				int WeaponRank; string WeaponRankString;
				[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
				StatusBar.DrawString(mMainFont, WeaponRankString, (-7, -108), DI_TEXT_LEFT, Font.FindFontColor("WeaponRank"));
				StatusBar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (223, -108), DI_TEXT_RIGHT, Font.FindFontColor("WeaponRank"));

				// Weapon kills.
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(WeaponKills, 1, 6), (66, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponKills"));

				// Weapon kills for next level.
				string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? StatusBar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
				StatusBar.DrawString(mMainFont, NextWeaponRankKills, (152, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponRank"));

				// Weapon preference.
				StatusBar.DrawString(mMainFont, int(WeaponKills / double(TotalKills) * 100).."%", (223, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponPreference"));

				// Weapon icon.
				string SpriteToDraw = "";
				string Icon = TexMan.GetName(GetDefaultByType(WeaponListSel).Icon);
				if (Icon == "ALTHUDCF")
				{
					State CurrState = GetDefaultByType(WeaponListSel).SpawnState;
					while (CurrState != null)
					{
						string SpriteName = TexMan.GetName(CurrState.GetSpriteTexture(0));
						if (SpriteName  != "TNT1A0")
						{
							SpriteToDraw = SpriteName;
							break;
						}
						CurrState = CurrState.NextState;
					}
				}
				else
				{
					SpriteToDraw = Icon;
				}
				StatusBar.DrawImage(SpriteToDraw, (40, -33), DI_CENTER);

				// Weapon medals.
				DrawWeaponMedals(WeaponKills, 108, -53, DI_CENTER);

				// --------------- MONSTER LIST & STATS ---------------

				// [Ace] Filter the monsters and get all the necessary data for the selected weapon.
				GetMonstersForWeapon(WeaponListSel.GetClassName(), AvailableMonsters);

				// [Ace] Then display them.
				StatusBar.DrawString(mMainFont, (SelMonsterPage + 1).."/"..GetMonsterPages(), (116, 12), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));

				int StartIndex = MonsterListEntries * SelMonsterPage;
				int mRow = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
				for (int i = StartIndex; i < AvailableMonsters.Size() && mRow < MonsterListEntries; ++i)
				{
					let Monster = GetDefaultByType(AvailableMonsters[i]);

					// [Ace] Truncate name if it's too long.
					string MonsterName = Monster.GetTag();
					if (MonsterName.Length() > MonsterListMaxStringWidth)
					{
						MonsterName = MonsterName.Mid(0, MonsterListMaxStringWidth).."...";
					}
					StatusBar.DrawString(mMainFont, MonsterName, (-7, 36 + 9 * mRow), DI_TEXT_LEFT, Font.FindFontColor("MonsterStats"));

					// Kills.
					int Kills = GetKillsForMonster(WeaponListSel.GetClassName(), Monster.GetClassName());
					StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Kills, 1, 5), (180, 36 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));

					// Percentage compared to other kills.
					StatusBar.DrawString(mMainFont, int((Kills / double(WeaponKills)) * 100).."%", (224, 36 + 9 * mRow), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));
					mRow++;
				}
			}
		}
		else
		{
			AutoSelected = false;
		}
	}

	// --------------------------------------------------
	// SHARED
	// --------------------------------------------------

	private ui void AutoSelectCurrentWeapon()
	{
		for (int i = 0; i < AvailableWeapons.Size(); ++i)
		{
			if (AvailableWeapons[i] == ReadyWeapon)
			{
				WeaponListSelIndex = i;
				break;
			}
		}
	}

	// [Ace] If the list suddenly goes blank, reset the index to 0. It also prevents out-of-index exceptions if you've selected the last weapon in the list and apply a filter which will reduce the total count.
	private ui class<Weapon> GetSelectedWeaponInList()
	{
		if (AvailableWeapons.Size() > 0)
		{
			if (WeaponListSelIndex >= AvailableWeapons.Size())
			{
				WeaponListSelIndex = AvailableWeapons.Size() - 1;
			}
			return AvailableWeapons[WeaponListSelIndex];
		}

		WeaponListSelIndex = 0;
		return null;
	}

	private ui void DrawWeaponMedals(int kills, int x, int y, int flags)
	{
		int MedalCount[MedalTypesCount]; // [Ace] Each integer denotes how many medals of a given type there should be, starting at the highest type.
		int TotalNumberOfMedals = kills / KillsPerMedal; // [Ace] More precisely, total number of tier 1 medals.
		for (int i = MedalTypesCount; i > 0; --i)
		{
			// [Ace] I'm not going to remember how this works a week from now.
			int MedalsForThisType = TotalNumberOfMedals / int(MedalsPerUpgrade ** (i - 1));
			TotalNumberOfMedals -= MedalsForThisType * int(MedalsPerUpgrade ** (i - 1));

			MedalCount[MedalTypesCount - i] = MedalsForThisType;
		}

		int MedalsShown = 0;
		for (int i = 0; i < MedalTypesCount; ++i)
		{
			MedalsShown += MedalCount[i];
			for (int j = 0; j < MedalCount[i]; ++j)
			{
				// [Ace] I'm definitely not going to remember how this works. I hate maths.
				int XOffset = (j + (MedalsShown - MedalCount[i]));
				int TotalXOffset = 11 * (XOffset % (MedalsPerLine));
				int YOffset = 15 * (XOffset / MedalsPerLine);
				StatusBar.DrawImage("WMEDAL"..(MedalTypesCount - i), (x + TotalXOffset, y + YOffset), flags);
			}
		}
	}

	private ui void GetAvailableWeapons()
	{
		AvailableWeapons.Clear();
		int WFilter = IWADWeaponFilter.GetInt();
		
		let it = DictionaryIterator.Create(MonsterKills);
		while (it.Next())
		{
			class<Weapon> wpn;
			wpn = it.Key();
			if (wpn)
			{
				int IwadType = GetIwadType(Search_Weapons, wpn);
				if ((WFilter == Filter_All || WFilter == IWadType || IwadType == Filter_None) && !InSearchMode && (SearchFilter == "" || GetDefaultByType(wpn).GetTag().MakeLower().IndexOf(SearchFilter.MakeLower()) != -1))
				{
					AvailableWeapons.Push(wpn);
				}
			}
		}

		// [Ace] Sort it.
		for (int i = 0; i < AvailableWeapons.Size() - 1; ++i)
		{
			for (int j = i + 1; j < AvailableWeapons.Size(); ++j)
			{
				let CurrWeapon = GetDefaultByType(AvailableWeapons[i]);
				let NextWeapon = GetDefaultByType(AvailableWeapons[j]);

				// [Ace] Sort by numbers first, then by first letter if the numbers match.
				if (CurrWeapon.SlotNumber >= NextWeapon.SlotNumber || (CurrWeapon.SlotNumber == NextWeapon.SlotNumber && String.Format("%s", CurrWeapon.GetClassName()).ByteAt(0) >= String.Format("%s", NextWeapon.GetClassName()).ByteAt(0)))
				{
					let Swap = AvailableWeapons[i];
					AvailableWeapons[i] = AvailableWeapons[j];
					AvailableWeapons[j] = Swap;
				}
			}
		}
	}

	private ui void GetMonstersForWeapon(string weapon, out Array<class<Actor> > arr)
	{
		arr.Clear();
		int MFilter = IWADMonsterFilter.GetInt();

		let it = DictionaryIterator.Create(Dictionary.FromString(MonsterKills.At(weapon)));
		while (it.Next())
		{
			class<Actor> mon;
			mon = it.Key();
			if (mon)
			{
				int IwadType = GetIwadType(Search_Monsters, mon);
				if (MFilter == Filter_All || MFilter == IWadType || IwadType == Filter_None)
				{
					arr.Push(mon);
				}
			}
		}

		// [Ace] Sort the darn thing while it's at it.
		for (int i = 0; i < arr.Size() - 1; ++i)
		{
			for (int j = i + 1; j < arr.Size(); ++j)
			{
				let CurrMonster = GetDefaultByType(arr[i]);
				let NextMonster = GetDefaultByType(arr[j]);
				if (CurrMonster.Health >= NextMonster.Health)
				{
					let Swap = arr[i];
					arr[i] = arr[j];
					arr[j] = Swap;
				}
			}
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private ui string GetGenocideRank(int kills) const
	{
		string GenRank = "Pacifist";
		for (int i = 0; i < GenocideReqs.Size(); ++i)
		{
			if (kills >= GenocideReqs[i])
			{
				GenRank = GenocideRanks[i];
			}
		}

		return GenRank;
	}

	private ui int, string GetPlayerRank() const
	{
		int PlayerRank = 0;
		string PlayerRankString = "Recruit";
		for (int i = 0; i < XPReq.Size(); ++i)
		{
			if (Experience >= XPReq[i])
			{
				PlayerRank = i + 1;
				PlayerRankString = XPRanks[i];
			}
		}

		return PlayerRank, PlayerRankString;
	}

	private ui int, string GetWeaponRank(int kills) const
	{
		int WeaponRank = 0;
		string WeaponRankString = "Strange";
		for (int i = 0; i < WeapKillReq.Size(); ++i)
		{
			if (kills >= WeapKillReq[i])
			{
				WeaponRank = i + 1;
				WeaponRankString = WeapRanks[i];
			}
		}

		return WeaponRank, WeaponRankString;
	}


	private ui int GetKillsForWeapon(string weapon) const
	{
		int TotalKills = 0;
		string Kills = MonsterKills.At(weapon);
		if (Kills != "")
		{
			let it = DictionaryIterator.Create(Dictionary.FromString(Kills)); 
			while(it.Next())
			{
				TotalKills += int(it.Value().ToDouble());
			}
		}

		return TotalKills;
	}

	private ui int GetTotalKillsForAllWeapons() const
	{
		int TotalKills = 0;
		let it = DictionaryIterator.Create(MonsterKills);
		{
			while (it.Next())
			{
				TotalKills += GetKillsForWeapon(it.Key());
			}
		}
		return TotalKills;
	}

	private ui int GetKillsForMonster(string weapon, string monster) const
	{
		let Monsters = Dictionary.FromString(MonsterKills.At(weapon));
		return int(Monsters.At(monster).ToDouble());
	}

	private ui int GetMonsterPages() const
	{
		return AvailableMonsters.Size() / (MonsterListEntries + 1) + 1;
	}

	// --------------------------------------------------
	// INPUT
	// --------------------------------------------------

	override bool UiProcess(UiEvent e)
	{
		if (e.Type == UiEvent.Type_KeyDown && DrawUi)
		{
			if (!InSearchMode)
			{
				switch (e.KeyChar)
				{
					// [Ace] Move weapon selection up.
					case UiEvent.Key_Up:
						WeaponListSelIndex = max(0, WeaponListSelIndex - 1);
						break;

					// [Ace] Move weapon selection down.
					case UiEvent.Key_Down:
						WeaponListSelIndex = min(WeaponListSelIndex + 1, AvailableWeapons.Size() - 1);
						break;

					// [Ace] Previous monster page.
					case UiEvent.Key_PgUp:
						SelMonsterPage = max(0, SelMonsterPage - 1);
						break;

					// [Ace] Next monster page. No cap on this because it'd be a pain to get how many monster pages the current weapon has.
					case UiEvent.Key_PgDn:
						SelMonsterPage = min(SelMonsterPage + 1, GetMonsterPages() - 1);
						break;

					// [Ace] Exit menu.
					case UiEvent.Key_Escape:
						SearchFilter = "";
						SendNetworkEvent("WT_ToggleUi");
						break;

					// [Ace] Enter search mode. Chars: Space
					case 32:
						SearchFilter = "";
						InSearchMode = true;
						break;

					// [Ace] Clear filter.
					case UiEvent.Key_Backspace:
						SearchFilter = "";
						break;

					// [Ace] Upgrade prestige. Chars: 'p' or 'P'.
					// It really bothers me that I'm doing such logic checks in the UI. I'd have to completely mess up the scoping otherwise.
					case 80:
					case 112:
						if (GetPlayerRank() == XPRanks.Size() && Prestige < 3)
						{
							SendNetworkEvent("WT_UpgradePrestige");
						}
						break;
				}
			}
			else
			{
				switch (e.KeyChar)
				{
					// [Ace] Apply filter.
					case UiEvent.Key_Return:
						InSearchMode = false;
						break;

					// [Ace] Exit search mode and don't apply filter.
					case UiEvent.Key_Escape:
						SearchFilter = "";
						InSearchMode = false;
						break;

					// [Ace] Delete last character.
					case UiEvent.Key_Backspace:
						SearchFilter.DeleteLastCharacter();
						break;

					default:
						if (SearchFilter.Length() < 13)
						{
							SearchFilter = SearchFilter..e.KeyString;
						}
						break;
				}
			}
		}

		return false;
	}
}