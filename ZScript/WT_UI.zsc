extend class WT_MainHandler
{
	// --------------------------------------------------
	// MAIN
	// --------------------------------------------------

	static const int XPReq[] = { 2500, 5000, 8000, 12500, 16000, 22000, 30000, 40000, 55000, 67500, 82000, 100000, 125000, 175000, 250000, 400000, 600000, 900000, 1150000, 1400000, 1900000, 2350000, 2850000, 3450000, 4000000, 5000000, 6500000, 8000000};
	static const string XPRanks[] = { "Private", "Private 1st Class", "Specialist", "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "First Sergeant", "Sergeant Major", "Cmd. Sergeant Major", "Master Chief Sergeant", "2nd Lieutenant", "1st Lieutenant", "Captain", "Major", "Lieutenant Colonel", "Colonel", "Brigadier General", "Major General", "Lieutenant General", "General", "General of the Army", "Field Marshal", "Force Of Freedom", "Savior of Humanity", "Immortal Demonslayer", "Heavenly Demiurge" };
	const RankImagesPrefix = "RANK";

	static const int WeapKillReq[] = { 10, 25, 50, 100, 150, 250, 375, 500, 750, 999, 1000, 1500, 2500, 5000, 7500, 7616, 8500, 10000, 14444, 19670 };
	static const string WeapRanks[] = { "Uninteresting", "Common", "Vaguely Rough", "Slightly Dangerous", "Plenty Hurtful", "Heavily Damaging", "Blood Splattered", "Wicked", "Positively Demonic", "Absolutely Ordinary", "Face-Gibbing", "Death-Inducing", "Absolutely Barbaric", "Ultraviolent", "Nightmarish", "American", "id Select", "Carmack's Own", "Ludicrously Deadly", "Romero's Prized" };

	static const int GenocideReqs[] = { 100, 500, 1500, 2750, 5500, 9000, 14000, 22000, 30000, 45000, 66666, 99999, 125000, 150000, 175000, 200000, 225000, 250000, 275000, 300000, 325000, 350000, 375000, 400000, 450000, 500000  };
	static const string GenocideRanks[]= { "Innocent", "Pacifist", "Gun-shy", "Unbloodied", "Still Afraid", "Base Grunt", "Bounty Hunter", "Grave Digger", "Ditch Filler", "Killer", "Murderous Spree", "Mass Assassin", "Master Gunman", "Basically Mor'Ladim", "Anti-Army", "Diablophobe", "Bloodthirsty", "Ludicrous", "Warlord", "The Cleaner", "Psychopath", "Unstoppable Force", "Carnage Elemental", "Death Incarnate", "Doomslayer", "God of Genocide" };

	const WeaponListEntries = 11;
	const WeaponListMaxStringWidth = 16;
	const MonsterListEntries = 11;
	const MonsterListMaxStringWidth = 15;
	const KillsPerMedal = 5;
	const MedalsPerUpgrade = 5; // [Ace] This must be 2 or above!
	const MedalsPerLine = 11;
	const MedalTypesCount = 6;
	private transient ui int WeaponListSelIndex;
	private transient ui int SelMonsterPage;
	private transient ui bool AutoSelected;
	private transient bool DrawUi;

	private transient ui HUDFont mMainFont;

	override void RenderOverlay(RenderEvent e)
	{
		int LiteHUD = LiteHUDType.GetInt();
		mMainFont = HUDFont.Create("STRPFNT");

		// ------------------------------------------------
		// LITE HUD
		// ------------------------------------------------

		if (LiteHUD > 0 && !DrawUi)
		{
			int DI_TL = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_ITEM_LEFT_TOP;
			int DI_TL_TEXT_LEFT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TL_CENTER_TEXT_CENTER = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TL_CENTER_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_LEFT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			int DI_TR = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_ITEM_RIGHT_TOP;
			int DI_TR_TEXT_LEFT = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TR_TEXT_CENTER = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TR_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_RIGHT_TOP | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			// [Ace] Mmmm, code injections!
			StatusBar.BeginHUD();

			// --------------- MISCELLANEOUS ---------------

			AutoSelectCurrentWeapon();

			// --------------- SHARED ---------------

			class<Weapon> WeaponListSel = GetSelectedWeaponInList();
			int WeaponKills = WeaponListSel ? GetKillsForWeapon(GetDefaultByType(WeaponListSel).GetClassName()) : 0;
			int TotalKills = GetTotalKillsForAllWeapons();

			// --------------- MAIN STATS ---------------

			if (LiteHUD == 1 || LiteHUD == 3)
			{
				// Total kills.
				StatusBar.DrawString(mMainFont, "Total:", (2, 2), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(TotalKills, 1, 10), (47, 2), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponKills"));

				// Genocide rank.
				StatusBar.DrawString(mMainFont, GetGenocideRank(TotalKills), (2, 12), DI_TL_TEXT_LEFT, Font.FindFontColor("GenocideRank"));

				// Player rank.
				int PlayerRank; string PlayerRankString;
				[PlayerRank, PlayerRankString] = GetPlayerRank();
				StatusBar.DrawString(mMainFont, PlayerRankString, (2, 26), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player experience.
				StatusBar.DrawString(mMainFont, "XP:", (2, 36), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Experience, 1, 7), (24, 36), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player experience for next level.
				string NextPlayerRankExp = PlayerRank < XPReq.Size() - 1 ? StatusBar.FormatNumber(XPReq[PlayerRank + 1], 1, 7) : "-";
				StatusBar.DrawString(mMainFont, "NX:", (2, 46), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, NextPlayerRankExp, (24, 46), DI_TL_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

				// Player medal.
				StatusBar.DrawImage("RANK"..PlayerRank, (4, 58), DI_TL);
			}

			// --------------- WEAPON STATS ---------------

			// [Ace] If the stats above aren't visible, shift the entire thing up.
			int YOffset = LiteHUD == 2 ? -98 : 0;
			if (LiteHUD > 1 && WeaponListSel && WeaponListSel == ReadyWeapon)
			{
				// Weapon name.
				StatusBar.DrawString(mMainFont, GetDefaultByType(WeaponListSel).GetTag(), (2, 100 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponName"));

				// Weapon rank.
				int WeaponRank; string WeaponRankString;
				[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
				StatusBar.DrawString(mMainFont, WeaponRankString, (2, 114 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));
				StatusBar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (2, 124 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));

				// Weapon kills.
				StatusBar.DrawString(mMainFont, "K:", (2, 138 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(WeaponKills, 1, 6), (16, 138 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponKills"));

				// Weapon kills for next level.
				string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? StatusBar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
				StatusBar.DrawString(mMainFont, "NX:", (2, 148 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("MiscLabels"));
				StatusBar.DrawString(mMainFont, NextWeaponRankKills, (26, 148 + YOffset), DI_TL_TEXT_LEFT, Font.FindFontColor("WeaponRank"));

				// Weapon medals.
				DrawWeaponMedals(WeaponKills, 2, 162 + YOffset, DI_TL);
			}
		}

		// ------------------------------------------------
		// SCORECARD
		// ------------------------------------------------

		else if (DrawUi)
		{
			StatusBar.BeginHUD();

			int DI_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_ITEM_CENTER;
			int DI_TEXT_LEFT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_LEFT;
			int DI_TEXT_CENTER = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_CENTER;
			int DI_TEXT_RIGHT = BaseStatusBar.DI_SCREEN_CENTER | BaseStatusBar.DI_TEXT_ALIGN_RIGHT;

			// --------------- MISCELLANEOUS ---------------

			// [Ace] Autoselect in the list your currently selected weapon in the world.
			if (!AutoSelected)
			{
				AutoSelectCurrentWeapon();
				AutoSelected = true;
			}

			// --------------- SHARED ---------------

			class<Weapon> WeaponListSel = GetSelectedWeaponInList();

			// --------------- GRAPHIC ---------------
			
			StatusBar.DrawImage(BlackDisplay.GetBool() ? "WTSTATPB" : "WTSTATPN", (0, 0.5), DI_CENTER);

			// --------------- MAIN STATS ---------------

			int WeaponKills = WeaponListSel ? GetKillsForWeapon(GetDefaultByType(WeaponListSel).GetClassName()) : 0;
			int TotalKills = GetTotalKillsForAllWeapons();

			// Total kills.
			StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(TotalKills, 1, 10), (-42, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponKills"));

			// Genocide rank.
			StatusBar.DrawString(mMainFont, GetGenocideRank(TotalKills), (-223, -60), DI_TEXT_LEFT, Font.FindFontColor("GenocideRank"));

			// Player rank.
			int PlayerRank; string PlayerRankString;
			[PlayerRank, PlayerRankString] = GetPlayerRank();
			StatusBar.DrawString(mMainFont, PlayerRankString, (-223, -36), DI_TEXT_LEFT, Font.FindFontColor("PlayerRank"));

			// Player experience.
			StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Experience, 1, 7), (-139, -12), DI_TEXT_RIGHT, Font.FindFontColor("PlayerRank"));

			// Player experience for next level.
			string NextPlayerRankExp = PlayerRank < XPReq.Size() - 1 ? StatusBar.FormatNumber(XPReq[PlayerRank + 1], 1, 7) : "-";
			StatusBar.DrawString(mMainFont, NextPlayerRankExp, (-42, -12), DI_TEXT_RIGHT, Font.FindFontColor("PlayerRank"));

			// Player medal.
			StatusBar.DrawImage("RANK"..PlayerRank, (-206, 28), DI_CENTER);

			// --------------- WEAPON LIST ---------------

			int WeaponPage = WeaponListSelIndex / WeaponListEntries;
			StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(WeaponPage + 1, 1), (-42, 12), DI_TEXT_RIGHT, Font.FindFontColor("MiscLabels"));

			for (int i = 0; WeaponListEntries * WeaponPage + i < AvailableWeapons.Size() && i < WeaponListEntries; ++i)
			{
				let CurrWeapon = GetDefaultByType(AvailableWeapons[WeaponListEntries * WeaponPage + i]);
				
				// [Ace] Truncate name if it's too long.
				string WeaponName = CurrWeapon.GetTag();
				if (WeaponName.Length() > WeaponListMaxStringWidth)
				{
					WeaponName = WeaponName.Mid(0, WeaponListMaxStringWidth).."...";
				}
				StatusBar.DrawString(mMainFont, WeaponName, (-174, 36 + 9 * i), DI_TEXT_LEFT, WeaponListSel == CurrWeapon.GetClass() ? Font.FindFontColor("SelectedWeapon") : Font.FindFontColor("MiscLabels"));
			}

			// --------------- WEAPON STATS ---------------

			if (WeaponListSel)
			{
				// Weapon name.
				StatusBar.DrawString(mMainFont, GetDefaultByType(WeaponListSel).GetTag(), (-7, -132), DI_TEXT_LEFT, Font.FindFontColor("WeaponName"));

				// Weapon rank.
				int WeaponRank; string WeaponRankString;
				[WeaponRank, WeaponRankString] = GetWeaponRank(WeaponKills);
				StatusBar.DrawString(mMainFont, WeaponRankString, (-7, -108), DI_TEXT_LEFT, Font.FindFontColor("WeaponRank"));
				StatusBar.DrawString(mMainFont, WeaponRank.."/"..WeapRanks.Size(), (223, -108), DI_TEXT_RIGHT, Font.FindFontColor("WeaponRank"));

				// Weapon kills.
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(WeaponKills, 1, 6), (66, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponKills"));

				// Weapon kills for next level.
				string NextWeaponRankKills = WeaponRank < WeapKillReq.Size() ? StatusBar.FormatNumber(WeapKillReq[WeaponRank], 1, 6) : "-";
				StatusBar.DrawString(mMainFont, NextWeaponRankKills, (152, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponRank"));

				// Weapon preference.
				StatusBar.DrawString(mMainFont, int(WeaponKills / double(TotalKills) * 100).."%", (223, -84), DI_TEXT_RIGHT, Font.FindFontColor("WeaponPreference"));

				// Weapon icon.
				StatusBar.DrawImage(TexMan.GetName(GetDefaultByType(WeaponListSel).SpawnState.GetSpriteTexture(0)), (40, -33), DI_CENTER);

				// Weapon medals.
				DrawWeaponMedals(WeaponKills, 108, -53, DI_CENTER);

				// --------------- MONSTER LIST & STATS ---------------

				// Monster page.
				StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(SelMonsterPage + 1, 1, 3), (116, 12), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));

				// [Ace] Filter the monsters and get all the necessary data.

				Array<class<Actor> > AvailableMonsters;
				GetMonstersForWeapon(WeaponListSel.GetClassName(), AvailableMonsters);

				// [Ace] Then display them.
				int StartIndex = MonsterListEntries * SelMonsterPage;
				int row = 0; // [Ace] Manually advance row so I don't have to do lots of modulus.
				for (int i = StartIndex; i < AvailableMonsters.Size() && row < MonsterListEntries; ++i)
				{
					let Monster = GetDefaultByType(AvailableMonsters[i]);

					// [Ace] Truncate name if it's too long.
					string MonsterName = Monster.GetTag();
					if (MonsterName.Length() > MonsterListMaxStringWidth)
					{
						MonsterName = MonsterName.Mid(0, MonsterListMaxStringWidth).."...";
					}
					StatusBar.DrawString(mMainFont, MonsterName, (-7, 36 + 9 * row), DI_TEXT_LEFT, Font.FindFontColor("MonsterStats"));

					// Kills.
					int Kills = GetKillsForMonster(WeaponListSel.GetClassName(), Monster.GetClassName());
					StatusBar.DrawString(mMainFont, StatusBar.FormatNumber(Kills, 1, 5), (180, 36 + 9 * row), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));

					// Percentage compared to other kills.
					StatusBar.DrawString(mMainFont, int((Kills / double(WeaponKills)) * 100).."%", (224, 36 + 9 * row), DI_TEXT_RIGHT, Font.FindFontColor("MonsterStats"));
					row++;
				}
			}
		}
		else
		{
			AutoSelected = false;
		}
	}

	// --------------------------------------------------
	// SHARED
	// --------------------------------------------------

	private ui void AutoSelectCurrentWeapon()
	{
		for (int i = 0; i < AvailableWeapons.Size(); ++i)
		{
			if (AvailableWeapons[i] == ReadyWeapon)
			{
				WeaponListSelIndex = i;
				break;
			}
		}
	}

	// [Ace] If the list suddenly goes blank, reset the index to 0. It also prevents out-of-index exceptions if you've selected the last weapon in the list and apply a filter which will reduce the total count.
	private ui class<Weapon> GetSelectedWeaponInList()
	{
		if (AvailableWeapons.Size() > 0)
		{
			if (WeaponListSelIndex >= AvailableWeapons.Size())
			{
				WeaponListSelIndex = AvailableWeapons.Size() - 1;
			}
			return AvailableWeapons[WeaponListSelIndex];
		}

		WeaponListSelIndex = 0;
		return null;
	}

	private ui void DrawWeaponMedals(int kills, int x, int y, int flags)
	{
		int MedalCount[MedalTypesCount]; // [Ace] Each integer denotes how many medals of a given type there should be, starting at the highest type.
		int TotalNumberOfMedals = kills / KillsPerMedal; // [Ace] More precisely, total number of tier 1 medals.
		for (int i = MedalTypesCount; i > 0; --i)
		{
			// [Ace] I'm not going to remember how this works a week from now.
			int MedalsForThisType = TotalNumberOfMedals / int(MedalsPerUpgrade ** (i - 1));
			TotalNumberOfMedals -= MedalsForThisType * int(MedalsPerUpgrade ** (i - 1));

			MedalCount[MedalTypesCount - i] = MedalsForThisType;
		}

		int MedalsShown = 0;
		for (int i = 0; i < MedalTypesCount; ++i)
		{
			MedalsShown += MedalCount[i];
			for (int j = 0; j < MedalCount[i]; ++j)
			{
				// [Ace] I'm definitely not going to remember how this works. I hate maths.
				int XOffset = (j + (MedalsShown - MedalCount[i]));
				int TotalXOffset = 11 * (XOffset % (MedalsPerLine));
				int YOffset = 15 * (XOffset / MedalsPerLine);
				StatusBar.DrawImage("WMEDAL"..(MedalTypesCount - i), (x + TotalXOffset, y + YOffset), flags);
			}
		}
	}

	// --------------------------------------------------
	// INFORMATION
	// --------------------------------------------------

	private ui string GetGenocideRank(int kills) const
	{
		string GenRank = "";
		for (int i = 0; i < GenocideReqs.Size(); ++i)
		{
			if (kills >= GenocideReqs[i])
			{
				GenRank = GenocideRanks[i];
			}
		}

		return GenRank;
	}

	private ui int, string GetPlayerRank() const
	{
		int PlayerRank = 0;
		string PlayerRankString = "Recruit";
		for (int i = 0; i < XPReq.Size(); ++i)
		{
			if (Experience >= XPReq[i])
			{
				PlayerRank = i;
				PlayerRankString = XPRanks[i];
			}
		}

		return PlayerRank, PlayerRankString;
	}

	private ui int, string GetWeaponRank(int kills) const
	{
		int WeaponRank = 0;
		string WeaponRankString = "Strange";
		for (int i = 0; i < WeapKillReq.Size(); ++i)
		{
			if (kills >= WeapKillReq[i])
			{
				WeaponRank = i + 1;
				WeaponRankString = WeapRanks[i];
			}
		}

		return WeaponRank, WeaponRankString;
	}


	private ui int GetKillsForWeapon(string weapon) const
	{
		int TotalKills = 0;
		string Kills = MonsterKills.At(weapon);
		if (Kills != "")
		{
			let it = DictionaryIterator.Create(Dictionary.FromString(Kills)); 
			while(it.Next())
			{
				TotalKills += int(it.Value().ToDouble());
			}
		}

		return TotalKills;
	}

	private ui int GetTotalKillsForAllWeapons() const
	{
		int TotalKills = 0;
		let it = DictionaryIterator.Create(MonsterKills);
		{
			while (it.Next())
			{
				TotalKills += GetKillsForWeapon(it.Key());
			}
		}
		return TotalKills;
	}

	private ui int GetKillsForMonster(string weapon, string monster) const
	{
		let Monsters = Dictionary.FromString(MonsterKills.At(weapon));
		return int(Monsters.At(monster).ToDouble());
	}

	// --------------------------------------------------
	// INPUT
	// --------------------------------------------------

	override bool InputProcess(InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown && DrawUi)
		{
			switch (e.KeyScan)
			{
				// [Ace] Move weapon selection up.
				case InputEvent.Key_UpArrow:
					WeaponListSelIndex = max(0, WeaponListSelIndex - 1);
					return true;

				// [Ace] Move weapon selection down.
				case InputEvent.Key_DownArrow:
					WeaponListSelIndex = min(WeaponListSelIndex + 1, AvailableWeapons.Size() - 1);
					return true;

				// [Ace] Previous monster page.
				case InputEvent.Key_PgUp:
					SelMonsterPage = max(0, SelMonsterPage - 1);
					return true;

				// [Ace] Next monster page. No cap on this because it'd be a pain to get how many monster pages the current weapon has.
				case InputEvent.Key_PgDn:
					SelMonsterPage++;
					return true;
			}
		}

		return false;
	}
}