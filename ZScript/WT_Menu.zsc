// [Ace] Each time I have to create somethingsomethingMenu.zsc I feel like drinking myself to death.

class OptionMenuItemFolderOption : OptionMenuItemOption
{
	override void SetSelection(int Selection)
	{
		Super.SetSelection(Selection);

		EventHandler.SendNetworkEvent("WT_InitWeaponFolders");
	}
} 

class OptionMenuItemFilterOption : OptionMenuItemOption
{
	override void SetSelection(int Selection)
	{
		Super.SetSelection(Selection);

		EventHandler.SendNetworkEvent("WT_ReInitialize");
	}
}

class OptionMenuItemHudColorOption : OptionMenuItemOption
{
	protected void CustomDrawValue(int indent, int y, int color, String text, bool grayed = false)
	{
		String label = Stringtable.Localize(text);
		int overlay = grayed? Color(96,48,0,0) : 0;

		Font fnt = Font.GetFont(WT_MainHandler.FontPrefix..CVar.FindCVar('wt_ui_font').GetInt() + 1);

		// [Ace] All this code for this line.
		screen.DrawText(fnt, color, indent + CursorSpace(), y + fnt.GetHeight() + 2, text, DTA_CleanNoMove_1, true, DTA_ColorOverlay, overlay);
	}

	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (mCenter)
		{
			indent = (screen.GetWidth() / 2);
		}
		drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, isGrayed());

		int Selection = GetSelection();
		String text = StringTable.Localize(OptionValues.GetText(mValues, Selection));
		if (text.Length() == 0) text = "Unknown";
		CustomDrawValue(indent, y, OptionMenuSettings.mFontColorValue, text, isGrayed());
		return indent;
	}
}

class OptionMenuItemVisibilityOption : OptionMenuItemOption
{
	int mBitShift;

	OptionMenuItemVisibilityOption Init(String label, Name command, Name values, int bitShift)
	{
		Super.Init(label, command, values);
		mBitShift = bitShift;

		return self;
	}

	override int GetSelection()
	{
		int Selection = 0; // [Ace] Normally -1, but this is guaranteed to have only 2 states. Unless someone got the genius idea of using anything other than "OnOff" for the OptionValue.
		int cnt = OptionValues.GetCount(mValues);
		if (cnt > 0 && mCVar != null)
		{
			if (OptionValues.GetTextValue(mValues, 0).Length() == 0)
			{
				int CurrentFlags = mCVar.GetInt();

				for (int i = 0; i < cnt; i++)
				{
					int OptionValue = int(OptionValues.GetValue(mValues, i));
					if (CurrentFlags & OptionValue << mBitShift)
					{
						Selection = i;
						break;
					}
				}
			}
		}
		return Selection;
	}

	override void SetSelection(int Selection)
	{
		int cnt = OptionValues.GetCount(mValues);
		if (cnt > 0 && mCVar != null)
		{
			if (OptionValues.GetTextValue(mValues, 0).Length() == 0)
			{
				int OptionValue = int(OptionValues.GetValue(mValues, Selection));
				int CurrentFlags = mCVar.GetInt();

				switch (OptionValue)
				{
					case 0: CurrentFlags &= ~(1 << mBitShift); break;
					case 1: CurrentFlags |= (1 << mBitShift); break;
				}
				mCVar.SetInt(CurrentFlags);
			}
		}
	}
}