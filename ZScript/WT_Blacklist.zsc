extend class WT_MainHandler
{
	private CVar BlacklistEnabled;

	// [Ace] Works for both weapons and monsters. Inheritance is also taken into account.
	private Array<class<Actor> > BlacklistDefs;
	private Array<class<Actor> > WhitelistDefs;

	private bool IsValid(class<Actor> cls)
	{
		int flags = BlackListEnabled.GetInt();

		bool isWhitelisted = false, isBlacklisted = false;
		if (flags & 1) // [Ace] This only works on weapons.
		{
			for (int i = 0; i < BlacklistDefs.Size(); ++i)
			{
				if (cls is BlacklistDefs[i])
				{
					isBlacklisted = true;
					break;
				}
			}
		}
		if (flags & 2)
		{
			for (int i = 0; i < WhitelistDefs.Size(); ++i)
			{
				if (cls is WhitelistDefs[i])
				{
					isWhitelisted = true;
					break;
				}
			}
		}

		switch (flags)
		{
			default: return true;
			case 1: return !isBlacklisted;
			case 2: return isWhitelisted;
			case 3: return isWhitelisted && !isBlacklisted;
		}
	}

	// [Ace] Copy-pasted from Universal Gibs with some edits.
	override void OnRegister()
	{
		ParseLump("WTBLKLST", BlacklistDefs);
		ParseLump("WTWHTLST", WhitelistDefs);
	}

	private void ParseLump(string lumpName, out Array<class<Actor> > arr)
	{
		arr.Clear();
		int LumpNum = -1;
		while ((LumpNum = Wads.FindLump(lumpName, LumpNum + 1, Wads.GlobalNamespace)) >= 0)
		{
			string lumpText = Wads.ReadLump(LumpNum);
			lumpText = lumpText.Filter();
			lumpText.Replace(" ", "");

			Array<string> parsedList;
			lumpText.Split(parsedList, ",");

			for (int i = 0; i < parsedList.Size(); ++i)
			{
				class<Actor> cls = parsedList[i];
				if (cls && arr.Find(cls) == arr.Size())
				{
					arr.Push(cls);
				}
			}
		}
	}
}